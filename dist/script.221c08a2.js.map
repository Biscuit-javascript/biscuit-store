{"version":3,"sources":["../packages/core/src/internal/repositories.js","../packages/core/src/internal/debugger.js","../packages/core/src/internal/messages.js","../packages/core/src/internal/emitter.js","../packages/core/src/internal/helper.js","../packages/core/src/internal/dispatch.js","../packages/core/src/internal/utils.js","../packages/core/src/internal/store.js","../packages/core/src/internal/creator.js","../packages/core/src/index.js","script.ts","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["repositories","states","middlewares","settings","strictMode","debugCollection","writeLog","type","message","repoName","Object","keys","length","line","stack","split","createLog","name","file","level","repo","data","key","Log","Error","constructor","call","Warning","console","warn","CreateError","messages","noRepo","noState","initialType","noListener","noValidAction","storageNameError","fnName","noStoreParams","noRepoName","middleNoFunc","debuggerNoFunc","actionString","repoNotFind","repoExists","createEmmitor","taskBuffer","subscribeAction","taskName","listener","state","task","todo","id","params","remove","splice","subscribeActions","actions","tasks","action","push","dispatchAction","forEach","undefined","emitter","getStateRepo","getRepository","content","actionError","activeMiddlewares","context","fn","middle","payload","gettter","instance","freeze","compareObject","firstState","lastState","propInFirst","propInLast","prop","dispatchProto","prev","act","payData","before","merge","after","resolve","Promise","then","dispatchInitMiddleware","newPayload","throttle","callback","limit","waiting","apply","arguments","setTimeout","debounce","isCooldown","sandbox","run","throt","initialThrottle","timer","throttleCaller","args","memoize","cache","n","result","value","regex","matches","prototype","toString","match","toLowerCase","subscriber","promise","getState","getRepo","addRepo","dispatch","voids","subscribeToState","that","e","reject","subscribeToStore","manager","pull","replaceRepo","replaceState","mergeState","targetAction","item","compareStates","compareWithState","compareStateWithInstance","compareRepoWithInstance","clone","update","props","newRepo","initial","subscribe","get","add","createStateTo","createNewState","stns","branch","bind","options","actionStr","actionParams","initialActions","createActions","map","stateCollection","collection","compile","all","fromRepo","outOfState","stateName","out","filter","combineStateCollections","collections","allState","sc","middleware","store","s","createDebuger","createStore","createAction","output","param","paramType","debugger","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","overlay","createErrorOverlay","document","body","appendChild","getElementById","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","concat","Function","deps","cached","some","cb"],"mappings":"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","file":"script.221c08a2.js","sourceRoot":"../exemples","sourcesContent":["/** storage instance */\nexport const repositories = {};\n/** states instance */\nexport const states = {};\n/** middlewares list */\nexport const middlewares = {};\n/** store settings */\nexport const settings = {\n    strictMode: {},\n};","\nimport { settings } from './repositories';\n\n/** debuger list */\nexport const debugCollection = {};\n\n/**\n * Write log object\n * @param {string} message message\n * @param {string} repoName repository name\n */\nconst writeLog = function (type, message, repoName) {\n    if (Object.keys(debugCollection).length > 0) {\n        const line = this.stack.split('\\n')[1].split(':')[2];\n        createLog(\n            {\n                message: this.name + ': ' + message,\n                file: line,\n                level: repoName ? 'local' : 'global',\n                repo: repoName,\n                type,\n            },\n            repoName\n        );\n    }\n};\n\n/**\n * This method processes the storage logs\n * and outputs them to the debugger if necessary.\n * @param {any} data is error -> new Error, is warn -> string\n * @param {string} repoName repository name\n * @public\n */\nexport const createLog = function (data, repoName) {\n    for (const key in debugCollection) {\n        if (key === repoName) {\n            debugCollection[key](data);\n        }\n\n        if (!repoName) {\n            debugCollection[key](data);\n        }\n    }\n};\n\n/**\n * Create  log\n * @param {string} message message\n * @param {string} repoName repository name\n * @public\n */\nexport class Log extends Error {\n    constructor(message, repoName) {\n        super(message);\n        this.name = 'Biscuit log';\n        writeLog.call(this, 'log', message, repoName);\n    }\n}\n\n/**\n * Create warning log\n * @param {string} message message\n * @param {string} repoName repository name\n * @public\n */\nexport class Warning extends Error {\n    constructor(message, repoName) {\n        super(message);\n\n        if (settings.strictMode[repoName]) {\n            // eslint-disable-next-line no-console\n            console.warn(message);\n        }\n\n        this.name = 'Biscuit warn';\n        writeLog.call(this, 'warning', message, repoName);\n    }\n}\n\n/**\n * Create error log\n * @param {string} message message\n * @param {string} repoName repository name\n * @public\n */\nexport class CreateError extends Error {\n    constructor(message, repoName) {\n        super(message);\n        this.name = 'Biscuit error';\n        writeLog.call(this, 'error', message, repoName);\n    }\n}","\n/** debug messages */\nexport const messages = {\n    noRepo: (name) => `repository <${name}> not found.`,\n    noState: (name) => `state <${name}> not found.`,\n    initialType: 'The initial must be an object.',\n    noListener: 'The subscriber\\'s listener must be a function.',\n    noValidAction: 'An invalid dependencies was processed.',\n    storageNameError: (fnName) =>\n        `biscuit ${fnName} error: storage name is not a string.`,\n    noStoreParams:\n\t\t'The createStore method must contain the storage parameters.',\n    noRepoName: 'The repository name is a required field.',\n    middleNoFunc: 'Middleware should be provided as a feature.',\n    debuggerNoFunc: 'Debugger should be provided as a feature.',\n    actionString: 'The state name must be a string.',\n    repoNotFind: 'Repository not found.',\n    repoExists: 'A repository with this name already exists.',\n};","import { Warning, CreateError, Log } from './debugger';\nimport { messages } from './messages';\n/**\n * Module of the library responsible for creating tasks and subscribing to them.\n * @param  {string} action action name\n * @return {object} methods\n * @public\n */\nfunction createEmmitor() {\n    const taskBuffer = {};\n\n    return {\n        /**\n\t\t * This method allows you to subscribe to an action.\n\t\t * Creates a task that puts its own callback function,\n\t\t * which should then be started by the dispatcher\n\t\t * @param {string} stateName name of the state to subscribe to\n\t\t * @param {function} listener callback function\n\t\t * @param {string} state store state\n\t\t * @return {object{params: object, remove: function}} returned task id\n\t\t * @public\n\t\t */\n        subscribeAction: (taskName, listener, state) => {\n            if (typeof listener !== 'function') {\n                throw new CreateError(messages.noListener, taskName);\n            }\n\n            if (!taskBuffer[taskName]) {\n                taskBuffer[taskName] = [];\n            }\n            /** create task */\n            const task = {\n                state,\n                name: taskName,\n                todo: listener,\n                id: taskBuffer[taskName].length,\n            };\n            /** write task to buffer */\n            taskBuffer[task.name][task.id] = task;\n\n            new Log(`subscribe -> store: ${taskName}, state: ${state}`, taskName);\n            return {\n                /** task params */\n                params: task,\n                /**\n\t\t\t\t * Remove listner\n\t\t\t\t */\n                remove: () => {\n                    new Log(\n                        `unsubscribe -> store: ${task.name}, state: ${task.state}`,\n                        task.name\n                    );\n                    taskBuffer[task.name].splice(task.id, 1);\n                },\n            };\n        },\n\n        /**\n\t\t * This method allows you to subscribe to multiple actions.\n\t\t * Creates multiple tasks that run a single callback function.\n\t\t * @param {actions[object{repo: string, store: string}]} actions array actions\n\t\t * @param {function} listener callback\n\t\t * @return {}\n\t\t */\n        subscribeActions: (actions, listener) => {\n            if (typeof listener !== 'function') {\n                throw new CreateError(messages.noListener);\n            }\n\n            const tasks = [];\n            for (const action of actions) {\n                new Log(\n                    `subscribe -> store: ${action.repo}, state: ${action.state}`,\n                    action.repo\n                );\n\n                if (!action.repo) {\n                    throw new CreateError(messages.noValidAction);\n                }\n\n                if (!taskBuffer[action.repo]) {\n                    taskBuffer[action.repo] = [];\n                }\n                /** create task */\n                const task = {\n                    state: action.state,\n                    name: action.repo,\n                    todo: listener,\n                    id: taskBuffer[action.repo].length,\n                };\n                /** write task to buffer */\n                taskBuffer[task.name][task.id] = task;\n                /** write tasks to an array, for subsequent\n\t\t\t\t *  deletion via the remove method */\n                tasks.push(task);\n            }\n\n            return {\n                /** tasks array */\n                params: tasks,\n                /**\n\t\t\t\t * Remove listners\n\t\t\t\t */\n                remove: () => {\n                    for (const task of tasks) {\n                        new Log(\n                            `unsubscribe -> store: ${task.name}, state: ${task.state}`,\n                            task.name,\n                        );\n                        taskBuffer[task.name].splice(task.id, 1);\n                    }\n                },\n            };\n        },\n\n        /**\n\t\t * Starts all tasks that match the specified state name\n\t\t * and passes data to their callback functions.\n\t\t * @param {object{repo: string, state: string}} action action params\n\t\t * @async\n\t\t * @public\n\t\t */\n        dispatchAction: (action) => {\n            new Log(\n                `dispatch -> store: ${action.repo}, state: ${action.state}`,\n                action.repo\n            );\n\n            if (taskBuffer[action.repo]) {\n                taskBuffer[action.repo].forEach((task) => {\n                    /**\n\t\t\t\t\t * If the status field is not defined,\n\t\t\t\t\t * then run the task without additional checks, if the field is found,\n\t\t\t\t\t * then perform a state comparison\n\t\t\t\t\t */\n                    if (task.state === action.state) {\n                        task.todo(task);\n                    }\n\n                    if (task.state === undefined) {\n                        task.todo(task);\n                    }\n                });\n                return;\n            }\n\n            new Warning(\n                `store \"${action.repo}\" has no active subscriptions.`,\n                action.repo\n            );\n        },\n    };\n}\n\nexport const emitter = createEmmitor();","import { middlewares, states, repositories } from './repositories';\nimport { CreateError } from './debugger';\nimport { messages } from './messages';\n\nexport function getStateRepo(action) {\n    return states[`\"${action.state}\"`][action.repo];\n}\n\nexport function getRepository(name) {\n    return repositories[name].content;\n}\n\nexport const actionError = (action) => {\n    if (!action || !action.repo || !action.state) {\n        throw new CreateError('Invalid action parameters.');\n    }\n\n    if (!repositories[action.repo]) {\n        throw new CreateError(messages.noRepo(action.repo));\n    }\n\n    if (!states[`\"${action.state}\"`]) {\n        throw new CreateError(messages.noState(action.state), action.repo);\n    }\n};\n\n/**\n * Helper method for running middleware\n * @param {object} context handler context\n * @param {function} fn callback\n * @async\n * @private\n */\nexport async function activeMiddlewares(context, fn = () => null) {\n    if (middlewares[context.repo]) {\n        await middlewares[context.repo].forEach((middle) => {\n            middle(context, fn);\n        });\n    } else {\n        fn(context.payload);\n    }\n}\n\n/**\n * This method is used to get the values of the object without\n * the possibility of overwriting.\n * by attempting to write generates an error.\n * @param {object} instance object to extract\n * @return {object} returns a modified copy of the object\n * @private\n */\nexport function gettter(instance) {\n    return Object.freeze({ ...instance });\n}\n\n/**\n * Helper method for comparing two objects\n * Warning: can't compare methods\n * @param {object} firstState first object\n * @param {object} lastState last object\n * @return {bool}\n * @private\n */\nexport function compareObject(firstState, lastState) {\n    let propInFirst = 0;\n    let propInLast = 0;\n    let prop;\n\n    if (firstState === lastState) {\n        return true;\n    }\n\n    if (\n        firstState === null ||\n\t\ttypeof firstState !== 'object' ||\n\t\tlastState === null ||\n\t\ttypeof lastState !== 'object'\n    ) {\n        return false;\n    }\n\n    for (prop in firstState) {\n        propInFirst += 1;\n    }\n\n    for (prop in lastState) {\n        propInLast += 1;\n\n        if (\n            !(prop in firstState) ||\n\t\t\t!compareObject(firstState[prop], lastState[prop])\n        ) {\n            return false;\n        }\n    }\n\n    return propInFirst === propInLast;\n}","import { repositories } from './repositories';\nimport { activeMiddlewares, getStateRepo } from './helper';\nimport { emitter } from './emitter';\n\nexport function dispatchProto({ action, prev, act, payData }) {\n    /**\n\t * Call before state change\n\t * @param {function} fn callback\n\t * @public\n\t */\n    this.before = (fn) => {\n        fn(prev);\n        return this;\n    };\n\n    /**\n\t * Merge state into repository\n\t * @public\n\t */\n    this.merge = () => {\n        repositories[action.repo].content = {\n            ...act,\n            ...payData,\n        };\n\n        return this;\n    };\n\n    /**\n\t * Call after state change\n\t * @param {function} fn callback\n\t * @async\n\t * @public\n\t */\n    this.after = async (fn) => {\n        let task;\n        const call = function (resolve) {\n            resolve({\n                ...getStateRepo(action).content,\n            });\n            task.remove();\n        };\n\n        await new Promise((resolve) => {\n            task = emitter.subscribeAction(\n                action.repo,\n                () => call(resolve),\n                action.state\n            );\n        }).then(fn);\n        return this;\n    };\n}\n\nexport async function dispatchInitMiddleware({ action, payData, act }) {\n    return await new Promise((resolve) => {\n        activeMiddlewares(\n            {\n                action: action.state,\n                repo: action.repo,\n                payload: payData,\n                state: act,\n            },\n            (newPayload) => {\n                resolve(newPayload);\n            }\n        );\n    });\n}","/**\n * Creates a throttled function that only invokes func\n * at most once per every wait milliseconds.\n * @param {function} callback target function\n * @param {number} limit counter\n * @return {function}\n */\nexport function throttle(callback, limit) {\n    let waiting = false;\n    return function () {\n        if (!waiting) {\n            callback.apply(this, arguments);\n            waiting = true;\n            setTimeout(() => {\n                waiting = false;\n            }, limit);\n        }\n    };\n}\n\n/**\n * Creates a debounced function that delays invoking func\n * until after wait milliseconds have elapsed since\n * the last time the debounced function was invoked.\n * @param {function} callback target function\n * @param {number} limit counter\n * @return {function}\n */\nexport function debounce(callback, limit) {\n    let isCooldown = false;\n\n    return function () {\n        if (isCooldown) {\n            return;\n        }\n        callback.apply(this, arguments);\n        isCooldown = true;\n        setTimeout(() => isCooldown = false, limit);\n    };\n}\n\n/**\n * This method set allows you to. save the state of functions\n * tied to the timer. Required for the case when the timer\n * function is initialized in a method with a frequent call,\n * for example, in the react function component.\n * @param {function} fn target function\n*/\nexport const sandbox = (fn) => {\n    return {\n        run: (function () {\n            let throt = null;\n\n            /** initial run\n             * @param {function} call target function\n             * @param {number} timer timeout\n            */\n            const initialThrottle = (call, timer) => {\n                if (!throt) {\n                    throt = fn(call, timer);\n                }\n            };\n\n            /** initial run\n             * @param {args[any]} args arguments\n             * @return {function}\n             */\n            const throttleCaller = (...args) => {\n                return throt(...args);\n            };\n\n            /** initial\n            * @param {function} call target function\n            * @param {number} timer timeout\n            * @return {function} throttleCaller\n            */\n            return (call, timer) => {\n                initialThrottle(call, timer);\n                return throttleCaller;\n            };\n        })(),\n    };\n};\n\n/**\n * memoized function\n * @param {function} fn target function\n * @return {function}\n*/\nexport const memoize = (fn) => {\n    const cache = {};\n    return (...args) => {\n        const n = args[0];\n        if (n in cache) {\n            return cache[n];\n        } else {\n            const result = fn(n);\n            cache[n] = result;\n            return result;\n        }\n    };\n};\n\n/**\n * Strict type checking\n * @param {*} value any value\n */\nexport function type(value) {\n    const regex = /^\\[object (\\S+?)]$/;\n    const matches = Object.prototype.toString.call(value).match(regex) || [];\n    return (matches[1] || 'undefined').toLowerCase();\n}\n","/**\n * BISCUIT STORAGE\n * @autor: Zhulev Philipp\n * @version: 1.0.0\n * @license MIT\n */\nimport {\n    repositories,\n    states,\n} from './repositories';\nimport {\n    emitter,\n} from './emitter';\nimport {\n    gettter,\n    getStateRepo,\n    getRepository,\n    compareObject,\n    actionError,\n} from './helper';\nimport { dispatchProto, dispatchInitMiddleware } from './dispatch';\nimport { CreateError } from './debugger';\nimport { type } from './utils';\nimport { messages } from './messages';\n\n/**\n * Allows you to subscribe to the store. and tracks its change.\n * @param {string} repo repository name\n * @param {function} fn callback\n * @param {string} state state name\n * @return {Promise}\n * @async\n */\nconst subscriber = function (repo, fn, state) {\n    let task;\n    const promise = new Promise((resolve) => {\n        task = emitter.subscribeAction(repo, () => {\n            /** if there is a state then pick it up */\n            const data = state\n                ? getState({ repo, state })\n                : getRepo(repo);\n            fn(data, task);\n            resolve({ data });\n        }, state);\n    });\n\n    const resolve = this.resolve(promise);\n    resolve['unsubscribe'] = task.remove;\n\n    return resolve;\n};\n\n/**\n * This method allows you to add new values to the repository.\n * Accepts the storage name and object.\n * @param {string} name repository name\n * @param {object} instance object with added data\n * @public\n */\nexport function addRepo(name, instance) {\n    if (!repositories[name]) {\n        throw new CreateError(messages.noRepo(name));\n    }\n\n    if (type(instance) !== 'object') {\n        throw new CreateError(messages.initialType);\n    }\n\n    repositories[name].content = {\n        ...getRepository(name),\n        ...instance,\n    };\n}\n\n/**\n * This method is used to get data from the storage by its key.\n * Warning: Storage data cannot be changed directly.\n * You can replace the values either with the \"addRepo\"\n * method or with state injection via \"manager\".\n * @param {string} name storage name\n * @return {object} storage data\n * @public\n */\nexport function getRepo(name) {\n    if (!repositories[name]) {\n        throw new CreateError(messages.noRepo(name));\n    }\n\n    return gettter({ ...getRepository(name) });\n}\n\n/**\n * This method is needed to get the storage state\n * Warning: Storage data cannot be changed directly.\n * You can replace the values either with the \"dispatch (...)\"\n * method or with an implementation via \"manager\".\n * @param {import('../types/state').StateAction} action the parameters of the action\n * @return {object} state data\n * @public\n */\nexport function getState(action) {\n    actionError(action);\n    return gettter({ ...getStateRepo(action).content });\n}\n\n/**\n * This is one of the most important methods.\n * allows you to asynchronously update and change the state of the storage.\n *\n * The first argument accepts action parameters,\n * the second argument accepts an object with new data\n * or a callback function that returns the past state\n * as an argument and returns a new state.\n *\n * Dispatch also returns several methods for working with states.\n * @param {import('../types/state').StateAction} action the parameters of the action\n * @param {object | import('../types/state').DispatchPayload} payload\n * payload data or callback function\n * @return {import('../types/state').Dispatcher}\n * returns methods: before, after, merge\n * @async\n * @public\n */\nexport function dispatch(action, payload = {}) {\n    const voids = {};\n\n    actionError(action);\n\n    if (type(payload) !== 'function' && type(payload) !== 'object') {\n        throw new CreateError('The payload must be an object or function.', action.repo);\n    }\n\n    (async function () {\n        const act = getStateRepo(action).content;\n        const prev = { ...act };\n\n        /** if the function\n         * then pass the current state to the callback  */\n        let payData = typeof payload === 'function'\n            ? payload(prev)\n            : payload;\n\n        dispatchProto.call(voids, {\n            action,\n            prev,\n            act,\n            payData,\n        });\n\n        /** initial middlewares */\n        payData = await dispatchInitMiddleware({ action, payData, act });\n\n        /** update state data */\n        getStateRepo(action).content = {\n            ...act,\n            ...payData,\n        };\n\n        /** create dispatch action */\n        emitter.dispatchAction(action);\n    })();\n\n    return voids;\n}\n\n/**\n * This is one of the most important methods.\n * Allows you to subscribe to the state. and tracks its change.\n * The first argument takes the parameters of the action.\n * results can be obtained through the callback of the second\n * argument or through the return promise.\n * @param {import('../types/state').StateAction} action the parameters of the action\n * @param {import('../types/subscribe').SubscribeListner} fn callback\n * @return {Promise<any>}\n * @async\n * @public\n */\nexport function subscribeToState(action, fn = () => undefined) {\n    const that = Promise;\n    try {\n        actionError(action);\n        return subscriber.call(that, action.repo, fn, action.state);\n    } catch (e) {\n        return that.reject(e);\n    }\n}\n\n/**\n * This is one of the most important methods.\n * Allows you to subscribe to the store. and tracks its change.\n * The first argument takes the name store.\n * results can be obtained through the callback of the\n * second argument or through the return promise.\n * @param {string} repo repository name\n * @param {import('../types/state').SubscribeListner} fn callback\n * @callback\n * @async\n * @public\n */\nexport function subscribeToStore(repo, fn = () => undefined) {\n    const that = Promise;\n    try {\n        if (!repositories[repo]) {\n            throw new CreateError(messages.noRepo(repo));\n        }\n\n        return subscriber.call(that, repo, fn);\n    } catch (e) {\n        return that.reject(e);\n    }\n}\n\n/**\n * The State Manager allows you to manage the storage and its state.\n * Provides a set of methods for two-way merge, replace, copy,\n * and other actions between the selected storage and state.\n * @param {object{repo: string, state: string}} action the parameters of the action\n * @return {object} returns a set of methods\n * @public\n */\nexport function manager(action) {\n    actionError(action);\n    return {\n        /**\n         * This method will combine data from the state with data from the storage.\n         * @public\n         */\n        merge: () => {\n            repositories[action.repo].content = {\n                ...getRepository(action.repo),\n                ...getStateRepo(action).content,\n            };\n        },\n\n        /**\n         * This method will merge data from the storage with data from the state.\n         * @public\n         */\n        pull: () => {\n            getStateRepo(action).content = {\n                ...getStateRepo(action).content,\n                ...getRepository(action.repo),\n            };\n        },\n\n        /**\n         * This method will replace the data from the storage with state data.\n         * @public\n         */\n        replaceRepo: () => {\n            repositories[action.repo].content = {\n                ...getStateRepo(action).content,\n            };\n        },\n\n        /**\n         * This method will replace the data from the state with the storage data.\n         * @public\n         */\n        replaceState: () => {\n            getStateRepo(action).content = {\n                ...getRepository(action.repo),\n            };\n        },\n\n        /**\n         * This method will merge the data of the selected state\n         * with the data of the state specified in the arguments.\n         * @param {import('../types/state').StateAction} targetAction\n         * the action that you want to merge\n         * @public\n         */\n        mergeState: (targetAction) => {\n            actionError(targetAction);\n            getStateRepo(action).content = {\n                ...getStateRepo({\n                    state: targetAction.state,\n                    repo: action.repo,\n                }).content,\n                ...getStateRepo(action).content,\n            };\n        },\n\n        /**\n         * This method removes the storage and its copies from all states.\n         * WARNING: This method can be useful for optimization,\n         * but it can make the code non-obvious,\n         * which will lead to difficulties in support.\n         * @public\n         */\n        remove: () => {\n            delete repositories[action.repo];\n            Object.keys(states[`\"${action.state}\"`]).forEach((item) => {\n                if (item === action.repo) {\n                    delete states[`\"${action.state}\"`][action.repo];\n                }\n            });\n        },\n\n        /**\n         * This method compares two states for identity\n         * WARNING: states should not contain methods\n         * @param {import('../types/state').StateAction} targetAction\n         * the action that you want to compare\n         * @return {bool}\n         * @public\n         */\n        compareStates: (targetAction) => {\n            actionError(targetAction);\n            return compareObject(\n                getStateRepo(action).content,\n                ...getStateRepo({\n                    state: targetAction.state,\n                    repo: action.repo,\n                }).content,\n            );\n        },\n\n        /**\n         * Сompare state and repository\n         * WARNING: states should not contain methods\n         * @return {bool}\n         * @public\n         */\n        compareWithState: () => {\n            return compareObject(\n                getRepository(action.repo),\n                getStateRepo(action).content\n            );\n        },\n\n        /**\n         * compare state and instance object\n         * WARNING: states should not contain methods\n         * @param {object} instance object instance\n         * @return {bool}\n         * @public\n         */\n        compareStateWithInstance: (instance) => {\n            return compareObject(getStateRepo(action).content, instance);\n        },\n\n        /**\n         * compare repository and instance object\n         * WARNING: states should not contain methods\n         * @param {object} instance object instance\n         * @return {bool}\n         * @public\n         */\n        compareRepoWithInstance: (instance) => {\n            return compareObject(getRepository(action.repo), instance);\n        },\n\n        /**\n         * Clones the selected storage and its state.\n         * WARNING: It is best to avoid using this method,\n         * as the best practice would be to do initialization of repositories in one place.\n         * Copying the repository can lead to code support difficulties.\n         * @param {string} name name for the new storage\n         * @public\n         */\n        clone: (name) => {\n            repositories[name] = { content: { ...getRepository(action.repo) } };\n            states[`\"${action.state}\"`][name] = {\n                content: { ...getStateRepo(action).content },\n            };\n        },\n\n        /**\n         * Updates the status of the repository.\n         * This method is equivalent to dispatch(...)\n         * @public\n         */\n        update: () => {\n            dispatch(action, {});\n        },\n\n        /**\n         * Returns parameters of the selected action\n         * @public\n         */\n        props: action,\n    };\n}\n","import { debugCollection, CreateError } from './debugger';\nimport {\n    repositories,\n    states,\n    middlewares,\n    settings,\n} from './repositories';\n\nimport {\n    dispatch,\n    subscribeToState,\n    getState,\n    getRepo,\n    subscribeToStore,\n    addRepo,\n} from './store';\nimport { type } from './utils';\nimport { actionError } from './helper';\nimport { messages } from './messages';\n\n/**\n * This method is responsible for creating a new repository.\n * Takes as the first argument a string with the repository name.\n * and the initial state of the storage as the second argument\n * @param {string} name storage name\n * @param {import('../types/store').Store} initial initial object\n * @public\n */\nexport function newRepo(name, initial = {}) {\n    if (!name) {\n        throw new CreateError(messages.noRepoName);\n    }\n\n    if (repositories[name]) {\n        throw new CreateError(messages.repoExists);\n    }\n\n    if (typeof name !== 'string') {\n        throw new CreateError(messages.storageNameError('newRepo'));\n    }\n\n    if (type(initial) !== 'object') {\n        throw new CreateError(messages.initialType, name);\n    }\n\n    repositories[name] = { content: initial };\n\n    return {\n        repo: name,\n        /** Subscribe by change @param {function} fn */\n        subscribe: (fn) => subscribeToStore(name, fn),\n        /** get reposiory */\n        get: () => getRepo(name),\n        /** add to reposiory @param {object} instance */\n        add: (instance) => addRepo(name, instance),\n    };\n}\n\n/**\n * This method binds states to the storage via the \"add\" method.\n * Gets the storage name string as an argument.\n * @param {import('../types/store').Store} params name of the linked storage\n * @return {import('../types/state').ActionCreator} returns the \"add\" method\n * @public\n */\nexport function createStateTo(params) {\n    if (!repositories[params.repo]) {\n        throw new CreateError(messages.repoNotFind);\n    }\n\n    const createNewState = (stns) => {\n        if (!stns.branch) {\n            return repositories[params.repo];\n        }\n\n        return {\n            content: {\n                ...repositories[params.repo].content,\n                ...stns.initial,\n            },\n        };\n    };\n\n    return {\n        /** This method binds the state to the selected storagee\n\t\t * @param {string} action state name\n         * @param {import('../types/state').StateOptions} options state options\n         * @return {import('../types/state').StateAction}\n\t\t * @public\n\t\t */\n        bind: (action, options = { branch: false, initial: {} }) => {\n            if (typeof action !== 'string') {\n                throw new CreateError(messages.actionString, params.repo);\n            }\n\n            const actionStr = `\"${action}\"`;\n\n            states[actionStr] = {\n                ...states[actionStr],\n                [params.repo]: createNewState(options),\n            };\n\n            const actionParams = {\n                repo: params.repo,\n                state: action,\n            };\n\n            return {\n                ...actionParams,\n                /**\n\t\t\t\t * Update state\n\t\t\t\t * @param {import('../types/state').DispatchPayload} payload\n\t\t\t\t * @public\n\t\t\t\t */\n                dispatch: (payload = {}) => dispatch(actionParams, payload),\n                /**\n\t\t\t\t * Subscribe to state\n\t\t\t\t * @param {import('../types/subscribe').SubscribeListner} fn callback\n\t\t\t\t * @public\n\t\t\t\t */\n                subscribe: (fn) => subscribeToState(actionParams, fn),\n\n                /**\n\t\t\t\t * Get state\n\t\t\t\t * @public\n\t\t\t\t */\n                getState: () => getState(actionParams),\n            };\n        },\n        /** repository key */\n        repo: params.repo,\n    };\n}\n\n/**\n * This helper method takes the first parameter \"createactionsTo\"\n * and adds actions to it from the string array of the second argument.\n * @param {import('../types/state').ActionCreator} createActions\n * createactionsto(storage name) method\n * @param {array[string]} actions actions string array\n * @return {{import('../types/state').StateAction}[]} actions\n * @public\n */\nexport function initialActions(createActions, actions) {\n    return actions.map((item) => {\n        const args = typeof item === 'string'\n            ? [item]\n            : [item.name, item.options];\n\n        return createActions.bind.apply(null, args);\n    });\n}\n\n/**\n * This helper method converts the actions received via the argument to an array\n * @return {import('../types/state').StateCollection} returns the \"compile\" method\n * @public\n */\nexport function stateCollection() {\n    const collection = {};\n    return {\n        /**\n\t\t * compile state collection\n\t\t * @return {import('../types/state').StateCollectionRepo} actions collection\n\t\t * @public\n\t\t */\n        compile: (...actions) => {\n            for (let action of actions) {\n                actionError(action);\n\n                if (!collection[action.repo]) {\n                    collection[action.repo] = [{ ...action }];\n                    continue;\n                }\n\n                collection[action.repo].push({ ...action });\n\n            }\n\n            return { ...collection };\n        },\n        /**\n         * Get the entire collection actions\n         * @return {import('../types/state').StateCollectionRepo} collections instance\n         * @public\n         */\n        all: () => ({ ...collection }),\n\n        /**\n         * Get a collection by matching the storage name\n         * @param {string} repo storage name\n         * @return {import('../types/state').StateAction[]} collections instance\n         * @public\n         */\n        fromRepo: (repo) => [ ...collection[repo] ],\n\n        /**\n         * Get the result filtered by state name\n         * @param {string} stateName state name\n         * @return {import('../types/state').StateAction[]} state list\n         * @public\n         */\n        outOfState: (stateName) => {\n            let out = null;\n            Object.keys(collection).forEach((key) => {\n                out = collection[key].filter(({ state }) => state === stateName);\n            });\n\n            return out;\n        },\n    };\n}\n\n/**\n * This helper method can combine multiple collections of actions.\n * Accepts \"stateCollection(...action)\"\n * @param {import('../types/state').StateCollection} collection array StateCollection\n * @public\n */\nexport function combineStateCollections(...collections) {\n    let allState = [];\n    for (let collection of collections) {\n        Object.keys(collection.all()).forEach((repoName) => {\n            allState = [ ...allState, ...collection.fromRepo(repoName) ];\n        });\n    }\n\n    const sc = stateCollection();\n    sc.compile.apply(null, allState);\n    return sc;\n}\n\n/**\n * This method allows you to add middleware for the state handler.\n * @param {import('../types/store').Store} store the store params\n * @return {import('../types/store').MiddlewareParams} returns a set of methods\n * @public\n */\nexport function middleware(store) {\n    if (!repositories[store.repo]) {\n        throw new CreateError(messages.noRepo(store.repo));\n    }\n\n    const s = store.repo;\n    return {\n        /**\n\t\t * Adds a handler to the middleware task list.\n\t\t * @param {function} fn middle function\n\t\t * @public\n\t\t */\n        add: (fn) => {\n            if (typeof fn !== 'function') {\n                throw new CreateError(messages.middleNoFunc, s);\n            }\n\n            if (middlewares[s]) {\n                middlewares[s].push(fn);\n            } else {\n                middlewares[s] = [fn];\n            }\n        },\n    };\n}\n\n/**\n * This method allows you to add your own debugger.\n * The debugger will accept and output logs instead of the standard debugger.\n * @param {import('../types/store').Store} store store object\n * @param {import('../types/store').DebuggerListener} fn debugger callback function\n * @public\n */\nexport function createDebuger(store, fn) {\n    if (!repositories[store.repo]) {\n        throw new CreateError(messages.noRepo(store.repo));\n    }\n\n    if (typeof fn !== 'function') {\n        throw new CreateError(messages.debuggerNoFunc);\n    }\n\n    debugCollection[store.repo] = fn;\n}\n\n/**\n * Monolithic method for creating a biscuit storage.\n * This is the preferred method for creating a repository.\n * @param {import('../types/store').StoreSettings} options\n * an object containing the store settings\n * @return {import('../types/store').StoreParams}\n * returns a set of actions\n * @public\n */\nexport function createStore(options) {\n    if (!options) {\n        throw new CreateError(messages.noStoreParams);\n    }\n\n    /** DefaultParams */\n    const params = { strictMode: true, ...options };\n\n    /** Create a new storage */\n    const repo = newRepo(params.repo.name, params.repo.initial);\n    const createAction = createStateTo(repo);\n\n    /** Set of storage parameters */\n    const output = {\n        store: { ...repo },\n        actions: {},\n    };\n\n    /** Adding States to the repository */\n    if (params.states) {\n        for (const key in params.states) {\n            const param = params.states[key];\n            const paramType = typeof param === 'string';\n            output.actions[key] = createAction.bind(\n                paramType ? param : param.name,\n                paramType\n                    ? {}\n                    : { initial: param.initial, branch: param.branch }\n            );\n        }\n    }\n\n    /** Adding middleware to the repository */\n    if (params.middleware && params.middleware.length > 0) {\n        const middle = middleware(repo);\n        for (const fn of params.middleware) {\n            middle.add(fn);\n        }\n    }\n\n    /** Adding debuger to the repository */\n    if (params.debugger) {\n        createDebuger(repo, params.debugger);\n    }\n\n    /** Strict mod */\n    settings.strictMode[params.repo.name] = params.strictMode;\n\n    return output;\n}","export {\n    createStore,\n    newRepo,\n    createStateTo,\n    initialActions,\n    stateCollection,\n    combineStateCollections,\n    middleware,\n    createDebuger,\n} from './internal/creator';\n\nexport {\n    manager,\n    dispatch,\n    getRepo,\n    getState,\n    addRepo,\n    subscribeToState,\n    subscribeToStore,\n} from './internal/store';\n","import {\n    createStore,\n    subscribeToState,\n    subscribeToStore,\n    dispatch,\n    getState,\n    getRepo,\n    addRepo,\n    createStateTo,\n    initialActions,\n    stateCollection,\n    combineStateCollections,\n    middleware,\n    createDebuger,\n    manager,\n} from '../packages/core/src';\n\ninterface Initial {\n    value: number;\n}\n\n\ninterface NewInitial {\n    id: number;\n}\n\nconst { store, actions } = createStore({\n    repo: {\n        name: 'user',\n        initial: { value: 0 },\n    },\n    states: {\n        testAdd: 'TEST/ADD',\n        testRemove: 'TEST/REMOVE',\n        testStep: {\n            name: 'TEST/STEP',\n            branch: true,\n            initial: { name: 'fill' },\n        },\n    },\n});\n\nmiddleware(store).add((context, next) => {\n    console.log('context', context);\n    next();\n});\n\ncreateDebuger(store, (e) => {\n    console.log(e);\n});\n\nstore.subscribe<Initial>((state: Initial) => {\n    console.log(state);\n});\n\nsubscribeToState<Initial>(actions.testAdd, (state: Initial) => {\n    console.log(state);\n});\n\nsubscribeToStore<Initial>('user', (state: Initial) => {\n    console.log(state);\n});\n\nactions.testAdd.subscribe<Initial>((state: Initial) => {\n    console.log(state);\n});\n\nactions.testAdd.dispatch({ value: 12 }).after<Initial>((state: Initial) => {\n    console.log(state);\n});\n\ndispatch(actions.testAdd, { value: 2 }).before<Initial>((state: Initial) => {\n    console.log(state);\n});\n\ndispatch(actions.testAdd, (prev: Initial) => ({ value: prev.value += 999 }));\n\nconsole.log(actions.testAdd.getState<Initial>().value);\n\nconsole.log(getState<Initial>(actions.testAdd).value);\n\nconsole.log(getRepo<Initial>('user').value);\n\naddRepo<NewInitial>('user', { id: 2 });\n\nconst superAction = createStateTo(store).bind('SUPER/ACTION');\n\nconsole.log(superAction);\n\nconst actionCollection = initialActions(createStateTo(store), [\n    { name: 'FIRST/ACTION', options: { branch: true, initial: { name: 'fil' } } },\n    'TWO/ACTION',\n    'LAST/ACTION',\n]);\n\nconsole.log(actionCollection);\n\nconst collection = stateCollection();\ncollection.compile(actions.testAdd, actions.testRemove);\n\nconsole.log(collection.all());\nconsole.log(collection.fromRepo('user'));\nconsole.log(collection.outOfState('TEST/ADD'));\n\nconst collection1 = stateCollection();\ncollection1.compile(actions.testStep);\n\nconst combineCollection = combineStateCollections(collection, collection1);\nconsole.log('sss', combineCollection.all());\n\n\nmanager(actions.testStep).merge();\nconsole.log(\n    'compare instance',\n    manager(actions.testStep)\n        .compareRepoWithInstance({ value: 0, id: 2, name: 'fill' })\n);\n\nconsole.log('1111111', getRepo('user'));\n\naddRepo('user', { result: 999 });\nconsole.log('not pull', getState(actions.testStep));\nmanager(actions.testStep).pull();\nconsole.log('pull', getState(actions.testStep));\n\n// manager(actions.testStep).remove();\n\nmanager(actions.testStep).clone('cloneuser');\n\nconsole.log('get clone', getRepo('cloneuser'));","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}