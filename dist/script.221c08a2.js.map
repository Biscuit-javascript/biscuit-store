{"version":3,"sources":["../packages/core/src/internal/repositories.js","../packages/core/src/internal/debugger.js","../packages/core/src/internal/messages.js","../packages/core/src/internal/emitter.js","../packages/core/src/internal/helper.js","../packages/core/src/internal/dispatch.js","../packages/core/src/internal/utils.js","../packages/core/src/internal/store.js","../packages/core/src/internal/creator.js","../packages/core/src/index.js","script.ts"],"names":["repositories","states","middlewares","settings","strictMode","debugCollection","writeLog","type","message","repoName","Object","keys","length","line","stack","split","createLog","name","file","level","repo","data","key","Log","Error","constructor","call","Warning","console","warn","CreateError","messages","noRepo","noState","initialType","noListener","noValidAction","storageNameError","fnName","noStoreParams","noRepoName","middleNoFunc","debuggerNoFunc","actionString","repoNotFind","repoExists","createEmmitor","taskBuffer","subscribeAction","taskName","listener","state","task","todo","id","params","remove","splice","subscribeActions","actions","tasks","action","push","dispatchAction","forEach","undefined","emitter","getStateRepo","getRepository","content","actionError","activeMiddlewares","context","fn","middle","payload","gettter","instance","freeze","compareObject","firstState","lastState","propInFirst","propInLast","prop","dispatchProto","prev","act","payData","before","merge","after","resolve","Promise","then","dispatchInitMiddleware","newPayload","throttle","callback","limit","waiting","apply","arguments","setTimeout","debounce","isCooldown","sandbox","run","throt","initialThrottle","timer","throttleCaller","args","memoize","cache","n","result","value","regex","matches","prototype","toString","match","toLowerCase","subscriber","promise","getState","getRepo","addRepo","dispatch","voids","subscribeToState","that","e","reject","subscribeToStore","manager","pull","replaceRepo","replaceState","mergeState","targetAction","item","compareStates","compareWithState","compareStateWithInstance","compareRepoWithInstance","clone","update","props","newRepo","initial","subscribe","get","add","createStateTo","createNewState","stns","branch","bind","options","actionStr","actionParams","initialActions","createActions","map","stateCollection","collection","compile","all","fromRepo","outOfState","stateName","out","filter","combineStateCollections","collections","allState","sc","middleware","store","s","createDebuger","createStore","createAction","output","param","paramType","debugger"],"mappings":";;;;;;AUAA,IAAA,KAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;ATCA,AEDA,ADCA,AFDA;AKAA,AHEO,AFDA,AUyBD,IAAA,ERxBO+B,AFDA/B,AUyBP,GAAA,KRxBe,AQwBf,CAAA,ERxBkB,CFDC,GAAG,EAArB,GUyBD,CAAA;ATvBN,AEFA,ADEIgC,AFDJ,EECIA,MAAM,EAAGf,IAAD,IAAW,eAAcA,IAAK,cADlB;ADEjB,AIHP,AHGIgB,AIJJ,EJIIA,IDAS5B,GCAF,EAAGY,IAAD,IAAW,EDAI,GAAG,EAAxB,GCA0BA,IAAK,cAFd;ADIxB,AEJA,ADGIiB,AIJJ,EJIIA,WAAW,EAAE,gCAHO;ADKxB,AILA,AFCA,ACHA,AFMIC,AFHG,AMDP,EJIIA,IFHSlC,MEGC,AFHK,EEGH,CFHM,EAAf,6CEDiB;ADMxB,AEJA,ADGImC,AFHJ,AOEA,ADHA,EJIIA,aAAa,EAAE,wCALK;AMFxB,APSA,AILO,AFCP,ACJA,AFOIC,AIJJ,EJIIA,CQkBE,MLtBUgD,SHII,EAAG/C,EGJhB,CAAuB,GHIR,IACb,WAAUA,MAAO,uCAPF;ADQxB,AINgCuB,AFEhC,ADIItB,AKAJ,ADLA,EDDgCsB,AHM5BtB,MGN0B,OHMb,EACf,6DATsB;AMDxB,AHGwC+C,AFGxC,ACLA,AFUI9C,AFPG,AMCP,EDFwC8C,AHQpC9C,IGR0B,ALCjBtC,MEOC,EAAE,GFPQ,GAAG,EAApB,kCEHiB;AGEsBqF,AFI9C,ADKI9C,AFPJ,AOOA,ADNO,EDHuC8C,AHS1C9C,GGT0B,IFIrBK,AGDOmD,KJMA,EAAE,CINX,CAAkBC,IHCzB,GAAyB,CGDlB,EAA4BC,KAA5B,EAAmC,0BJLlB;AMMxB,AHJmDX,AFK/C,ACLG,AFUH9C,AINA,EDJ+C8C,AHU/C9C,IINI0D,EHCErD,CCLMoB,IEID,GJMG,AINA,EHCE,ADKA,GCLG,ACLhB,AEIH,CFJyBN,CDKzB,KCLG,EAA8B,+BFFb;ADSxB,AIP8B,AFO1B,ACNA,AFUAlB,AKKJ,ADXI,CDLG,CHWHA,CGX0D,GJOxDrC,GEAK,ACNAL,AEIA,KLEG,ACIE,EAAE,CDJD,IKFM,MLEIM,GGNR,CHMF,EAAgBC,CGNXqD,MHML,AGNW,CAACV,CHMa1C,IGNP,GAAxB,CHMM,ACTO,CEGeoD,CHMa,KGNP,CAACzC,IAAnC,CAAP;AIWJ,APJI,AIPA,AFOI,ACNP,AFUGwB,AFTG,AMGC,EJMJA,IDJIlC,ADLKP,EMGD,CAACiG,GLEC,CAACzF,ACIA,CFTM,CESJ,CINT,CLEA,ADLgB,CCKJN,AKFE,eLEd,EAA6BO,GCVb,GDUhB,GAAsC,CAA1C,EAA6C;AACzC,AIPR,AFOA,ADIIiC,AFTAzC,AOaJ,ADVY8F,EJMRrD,AFTAzC,IMGQ8F,ILEErF,ECIA,AFTA,ECKI,ACIF,AFTA,AMGI,CAACwF,ELEA,GKFT,CAAe,CLEDvF,GKFd,ELES,AKFYwF,CLEDvF,KAAX,CAAiB,EKF1B,ELES,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAb;AOIR,APHQC,AIPR,AFOA,ACNO,AFNiB,AFKA,AMKZoF,CJVL,AFKA,GCOCpF,EKFIoF,GFJIhC,IHMC,AKFE,CLGP,EKHU,IAAV,EFJL,CAAuBnD,IAAvB,EAA6B;AHQpBT,AIRhB,AFOA,ACNI,AGaJ,ADTY+F,MLGI/F,AKHJ+F,GFJDvG,IHOY,EAAE,CKHH,CAAC,GLGOiB,GKHD,CLGJ,GAAY,IAAZ,GAAmBT,EGPpBS,IAAb,CHMC,CGNkBoD,OAA1B;AISJ,APDgBnD,AIRhB,AFOA,ACNC,AEIekF,MLGAlF,EKHAkF,ELGI,EAAEvF,GKHC,CLCX,EKDc,KAAV;ALIAM,AIRZ,AFOJ,AIMA,ADRa,MLGGA,CIRPsE,ACGa,EAEPU,ELGM,EAAE1F,AIRnB,CCGkB,CAAV,CDHOgE,EAAD,GJQa,CIRL,EJQQ,OAAH,GAAa,QAHhC;AOKZ,APDgBrD,AIRRqD,AFOR,ACNO,AEIE,AIUH,CAAA,CAAA,ELfEA,EJQQrD,AIRN,ADCGkD,CCDFgB,GJQS,CIRV,CJQY7E,AIRd,KDCgB,GHGZ,AGHgBoD,MAAD,IAAY;AISvC,APDgBtD,AIRR,AFOR,ACNI,AGbJ,ADiBK,AISC,GJjBF,CIiBI,ETNQA,AGPR,CAACsD,EMaD,ELdO,CKcP,CNbA,CMaA,CLdA,AKcA,ENbW,CAACA,EMad,INboB,CAACzC,IAAnB,IAA2B,CAACyC,MAAM,CAACV,KAAvC,EAA8C;AISlD,APPY,AIFP,AFOL,ACNQ,AGbR,ADiBC,AIQK,GLhBF,CKgBW,CTZE,EAQL1C,GGRE,CMYC,GNZGqB,AMYH,CTZE,CAAT,ASYO,CAAA,OAAT,WNZQ,CAAgB,4BAAhB,CAAN;AISR,APCK,AITD,AFMJ,ACNK,AGbL,ADkBA;AEIA,APCC,AITD,AFMQkB,AInBR,ADkBA,AIqBA,CT/BA,GEWQA,COoBR,CAAA,UAAA,CAAW,EPpBY,EAAE,CAACC,AOoB1B,EAAkB,GAAlB,CAAsB,EPpBG,EAAWC,MOoBb,EPpBE,EAAqBC,GOoBxB,EPpBG,AOoBO,IAAV,CPpBkC,COoBpB;AFjBpC,APEA,AIVA,AFMY,ACNR,AGbJ,ADkBA,AIqBI,EAAA,IN1BI,CAACnD,EM0BE,CPpBK,AOoBJ,GAAR,CAAY,GPpBOkD,MOoBnB,EPpBY,AOoBW,KPpBS,EOoBhC,EN1BkBW,MDMV,ACNgB,CAACzC,CDMmB,GCNvC,CAAL,EAAgC;AISpC,APEA,AIVA,AFMgB,ACNR,AGbR,ADkBA,AIqBI,EAAA,IAAI,IN1BM,IDMQ,ACNJU,IDMQA,iBCNZ,CAAgBC,GDMR,CAAgBA,eCNCC,IDMQG,ECNjB,CAAgB0B,MAAM,CDM9B,ACN+BzC,EDMM6B,ECN7B,CAAhB,CAAN,IDMc,CAAN;AKGhB,APEA,AEJa,ACNR,AEKL,AIqBC,CAHD;AFdO,APEP,AMLA,ADAA,AIsBA,KAAA,CAAA,GFnBgBqG,OAAT,CAAiBrI,EEmBxB,CAAc,CFnBP,EAAuBsI,EEmB9B,EAAqB,GFnBgB,GAAG,EAAjC,EAAqC,AEmBtB,CAAD,EAAE;AFlBnB,APEJ,AIZI,AFQQ,ACNR,AGKJ,ADAA,AIsBI,EAAA,IFnBI,AJRA,CIQCtI,AHVAyE,ADEAzF,EM2BE,CPrBK,AOqBJ,CFnBR,ALFa8C,CERb,CGUW,AEmBX,CAAY,CL7BC,AK6Bb,ML7BmB,AFQI,CAACE,MCNX,EDMU,CAAf,CCNQY,CDMmB,KCNb,CAACV,KAAM,GAAxB,CAAL,EAAkC;AIS9B,APER,AIZQnD,AFQQ+C,ACNR,AGKR,ADAA,AIsBC,CAFD,OPnBgBA,EKEF,AJRA,IIQIjB,AJRAA,IDMQ,CAACmB,QAAD,CAAV,GERKY,AFQkB,EAAvB,EKEF,AJRA,CIQgB9B,AJRAA,CCFH,CAACX,IAApB,EAA0BiD,OAA1B,GAAoC,CGUL7B,AJRAP,CCD3B,GAAGsD,GAD6B,ADEd,CAAiB1B,EIQjC,CAAN,GJR6C,CAACV,KAAxB,CAAhB,EAAgDU,MAAM,CAACzC,IAAvD,CAAN;AISH,APEL,AIXY,AFOC,ACNR,AGKL,AGuBA,KAAK,CAAC,GL7BSoE,MK6Bf,CAAyB,UAAC,KAAD,EAAe;AL/BI,AFUhC,ACNX,AGKD,AGuBI,CNxCG,CMwCH,GLhCI,IKgCG,CAAC,GAAR,CAAY,KAAZ;AFnBA,AHRI,ADCR,AGIA,ADFO,AIyBN,CAFD,KFlBQxF,GFLQwG,EDHD,IAAP,ECGD,CAAkBN,QAAlB,EAA4BC,KEKdlF,AFLd,EAAmC,EEKlC,CAAJ,EAAwB;AACpB,APAD,AIRF,ADCL,AGIA,ADFI,AI0BJ,GLpCI,EKoCJ,CTrBaD,AKLLyF,AI0BR,IFrBc,IAAI3E,CPAI,CKLJ,ELKO,CKLJ,GI0BrB,CAA0B,CJ1BtB,ILK+BT,ESqBF,CAAC,CTrBT,EAAgBZ,COA3B,CAAgBsB,EEqB9B,EAA2C,ETrBlB,EAA0B,MSqBP,KFrBLc,AEqBI,EAAe,QFrB5C,CAAN;AACH,APAD,AIPA,AFGQ,ACHZ,AGIA,ADDI,AIyBA,EAAA,KTrBK,EKJE,AIyBA,CAAC,EPzBMO,CFIH9B,ASqBX,CAAY,ETrBZ,AEJkB,GAAG,AOyBrB,CTrBkBjB,CKJC,cLInB,EAAmC;AAC/B,AIPR,AFGgB8C,ACHhB,AGIA,ADDQ,AIyBP,CAFD,KHtBMyE,ENGMtG,AEJI6B,AGAJsD,GLIG,EELU,GFKLhG,AMHJ,EDDR,CCCW,CDDK,ILIhB,EAAsB,GMHDW,IAAV,EAAgBqD,EAAhB,EAAoBtB,KAApB,EAA2B;ACI1C,APAQ9C,AIPZ,AFGgBY,ACHhB,AGII,ADDQ,AI0BZ,KAAA,CFtBQ,APAIZ,AMHJ+C,AGyBR,EP1BgBnC,EICZ,EJDgB,CKILA,CLJOgC,GKId,IPAmB,COAH,APAI3B,AENH,AO4BzB,CAA0B,ETtBC,CAAf,CAAqBD,ESsBjC,CFtBI,CPAQ,ASsBsB,CFtBA,SEsBC,KAAD,EAAe;AFrBzC,APAC,AIPT,AFGgBgC,ACHhB,AGII,ADDK,AI0BL,EAAA,MP1BYA,AICNwE,CGyBC,CFtBG,AEsBF,EP1BQ,CO0BhB,CFtBc/F,ALJIoB,AO0BN,CHzBC,GAAG,CGyBhB,GP7BqB,AIID2C,OAAJ,CAAaD,KCGnB,CAAgB7D,CDHE,IAAa,cCGNM,gBAAT,CAA0B,SAA1B,CAAhB,CAAN;AACH,AHPL,AFGgBiB,ACHhB,AGIQF,AGyBP,CAFD,GHvBQA,IJDQE,AICJ,EJDM,CICHY,CJDKnB,UAAU,CAACE,KICRD,GJDO,CAAV,CAAqBpC,UIC1B,CAAwBQ,IAAxB,EAA8B,MAAM;ANI3C,AIPR,AFFyB,AIMb,ADFJ8E,AI4BR,IJ5BQA,GHJI,AOgCL,CTvBK,ASuBJ,CTvBKzF,GKLG,CAAC4F,EI4BjB,CAAgB,CTvBR,CKLA,CLKe,AKLA,IAAf,EAAqBC,AI4B7B,CAAmC,QJ5B3B,EI4B4B,KAAD,EAAe;AFtB9C,APAQjG,AEJA,AICA,ADFJoG,AI4BJ,EAAA,EJ5BIA,EEKA,APAIpG,GSuBD,CAAC,EH1BMgB,CG0Bd,CJ5Bc,AI4BF,EH1BM,CDFD,ECEI8B,AG0BrB,ETvBuB,AKLnB,CLKoB7B,COAfiI,CDHiB,CNGH,CAAf,CAAqBlI,AMFfyG,GCEV,CPAI,IMFc,CCEA,ADFC,QCEvB,EAAgC;AAC5B,APAC,AMHoB1G,ADFrBmF,AI4BP,CAFD,GJ1BQA,ICEqBnF,ECGf,EDHa,ECGTU,AFLA,CAAC,MAAM2E,UAAU,GAAG,CEKxB,CAAgB1E,GFLZ,EAA2BoE,KAA3B,CAAV,QEK+BjE,WAAzB,EAAsCjB,IAAtC,CAAN;AACH,APAA,AITD,AFIQ8B,AICuBI,ADD9B,AI6BL,GJpCI,GHOQJ,CEJH4C,AKiCF,CH5B4BxC,AG4B3B,ILjCJ,GAAa,AKiCjB,CP7BsB,AO6BN,CP7BOC,IEJCqB,AFIG,CAACxD,CEJX,CKiCjB,CAAyB,CP7BH,CEJS,AFInB,CAAsBmC,IAAI,CAACE,EAA3B,IAAiCF,IAAjC;AFMX,AITO,AFKI,ACPL,AGMoB,ADA1B,AI4B0B,CTjCpB,CSiCoB,KH5BD,AG4BM,CLhCpBA,AEGkB,CG6BI,CP3BlB7B,CIAEwG,CFLV,GDFcxD,GGOG,CAACnD,IJAd,AIAa,CJAJ,AIFT,QHLL,CAAiCoD,OAAjC,EAA0CC,EAAE,GDORxB,ACPW,MAAM,EDOR,ECP7C,EAA2D,QDOHE,KAAM,EAAzD,EAA4DF,QAA5D;AKKRjD,APCJ,AELY,ACPR,AGOQyE,ADAZ,AI0ByB,CAAzB,EAAwC,GNjChCvE,AGOIuE,EAAE,AG0Bd,CH1BepD,AG0BwC,IP1BpC,AIAL,EAAO+B,IAAP,AG0B0C,CH1B5C,IG0B2C,EAAe,GFtBrDnC,GJXGuD,CIWhB,IAAqB,EJXE,CAACpD,IAApB,CAAJ,EAA+B;AIWRiD,APE3B,AIXQ,AFMQ,ACPR,AGOIuB,ADAZ,AI0BI,EAAA,EFvBuBvB,EDHfuB,GG0BD,CLhCGlE,ADDAxB,AMiCF,CFvBsB,EAAEqJ,ADHjB,AG0Bf,CLhCc,AEME,AG0BJ,GLhCK,EKgCjB,QLhC2B3D,OAAV,EAAmB,ADDdpB,OAAO,CAACpD,IAApB,EAA0B4C,OAA1B,CAAmCU,MAAD,IAAY;AIUnC,APGzB,AIXYkB,AFMIrC,ACPJmB,AGMUrD,ADCtB,AI0BC,CAFD,EFtBI,GHRQuE,ADDAlB,EDOInB,AIDMlC,IHNJ,CCCC,ADDAmD,CCCC,AFME,EELN,AFKQpB,GELL,CFGA,ACLD,EAAUqB,EAAV,CAAN,oBCEoBZ,MAAb,EAAqBQ;AGSpC,APEJ,AIZoB,ADAX,AGKW,ADEpB,AI2BA,KNpCc,AMoCd,CNpCQ,AMoCR,CLlCmB,AEKA,CFLP,AEKA,CCKD,KEwBX,CAAS,OAAO,CAAC,OAAjB,EAA0B;AFvBlBjD,APER,AIVYgC,AFII,ACNX,AGKI,ADET,AI0B4B,EAAA,CNrCxB,CIcIhC,CDZO,CFIHgC,CEGDD,AG4BsB,CFvBrB,CJVD,AMiCwB,CFvBrBlC,AHRE,CAACuC,CEJF,CAAP,CCWG,GHPC;AJWZ,AIVS,AFIT,ACNQiB,AGKH,ADEL,AIyB0B,CAA1B,EHpCoB,AGoCoB,CNhChCA,AGJJ,CFCI,CDGE,CAACD,EMgCX,CAAwD,INhCtC,CAACG,KMgCsC,ENhC/C,CAAF,EMgCgD,EAAe;AFtB/D,ALHR,ACNK,AGMD,ADCJ,AIyBI,EAAA,MH1BMiB,CG0BC,CAAC,GAAR,CAAY,CH1BC,GAAG,CG0BhB,IH1BqBA,OAAL,CAAaiC,OAAb,CAAhB;ACII2B,AHPA,AFIQhG,ACNf,AGMGoC,AG0BH,CAFD,CHxBIA,ECGI4D,ILHQhG,CIAL,CFJG,AEIF,GCGK,CHPCqC,AFII,CKGFpB,CLHI,CKGL,IAAQ,AHPb,CAAamB,AFIG,CIAnB,CAAP,GAAyBxC,EFJH,EEIO,CAACI,CFJK,KEInC,YCGwCvC,IAAjB,EAAuBwD,EAAvB,CAHhB;AHHCrB,AFIQ,ACLpB,AGMI,AG0BJ,KAAA,CL/BYA,AK+BZ,GH1BWwC,CFLK,GAAG1B,CFIK3C,AO2BxB,CAAS,CH1BL,MG0BY,CAAC,IP3BG,CACK,EELEyB,AK+B3B,EAA0B,UAAC,GL/BR,CACHa,AK8BU,EAAc,IL9BlB,CAACzC,AFI0BgC,IEL9B,AFKkC,CAACnC,CEHtC,GFG2C,GEHrCS,IAAI,CAACkE,IFG2CxC,GEH5C,CAFP,AFKuD,CAACD,CEF3DU,IFEiE,EEF3D,AFCF,CEDGV,CFGCC,IENL,AFMS,CENhB,AFMiBnC,IAFT;AKGZ,AHFC,AFGW8B,ACRpB,AGMC,ADFM,AI2BsC,CH1C7C,IFUc,CCKD2D,CDCFZ,EK0BmC,CPvB1B/C,CETN,CAME0B,CCDI,CDLN,CAAN,CCKgBA,EAAD,EHIO,CAACrB,CGJA,GHII,CAACnC,IAAN,CAAV,CAAsBwC,MAAtB,CAA6BL,IAAI,CAACE,EAAlC,EAAsC,CAAtC;AKAZmG,APAD,AIFC,AFGS,ACRjB,AGOA,ADHI,AI0B4C,IFvBxCA,AEuBwC,ETvBnClI,COAF,EAAE,APAN,AKHI,AI0B0C,ELzBtC,AKyBwC,IFvBpC,AHFX,AKyBmD,CAAC,ETvBnCC,GSuB8B,ETvBhD,CAAwB,CSuBsC,UFvB1CP,IAAR,CALR;APMPQ,AIFC,AFVc,ACKnB,AGOA,ADHQkF,AIyBsC,ETtB1ClF,CInBA,AKyCyC,CJzBrCkF,GHTI,AGSD,EAAG,ILGC,CAACnG,OAAD,AKHW,ELGDC,QAAV,EAAoB;AOA3B,APCA,AIFP,AFGQ,ACRT,AGOA,ADHY,AIwB+D,CAA3E,IPhEW,KF2CGD,AKHEoG,KAAK,ELGb,CKHgB,IAAZ;AEGJ8C,APCA,AGPR,AGOA,ADFY,AIwBZ,IFvBQA,GAAG,AEuBJ,CAAC,CFvBM7E,APCD5D,ESsBb,CAAY,CTtBJ,GAAY,CODP,EEuBM,CAAC,CFvBO,MEuBf,CAAgB,CTtBpB,OSsBI,GAAoC,EFvBbA,GEuBnC,CFvB2B,EAAc4D,QAAd;AAPhB,APSHvE,AIFD,AFGC,ACRR,AGOA,ADFA,AIyBA,GFhCI,CPSIA,GSuBD,CAAC,GAAR,CTvBgB,ASuBJ,CTvBKoB,EIFKqE,EJEd,ASuBI,CTvBU,ASuBV,ITvBJ,EAAoB,ESuBhB,CAAkB,ETvBtB,EAA2BvF,GSuBE,CAAC,ELzB/B,CJEC,AIFqC,EJEDC,ESuBhC,EAAmC,ITvBvC,CSuBR;AFvBC,APCI,AIH0CoD,AFI/C,ACRA,AGOA,ADFA,AI0BA,EL3B+CA,KK2BxC,CL3BsC,AK2BrC,GAAR,CAAY,KAAA,CAAA,OAAA,CAAiB,MAAjB,EAAyB,KAArC;AFvBA,AHJuD2B,AFKvD,AIDA,ADFA,AI2BA,EL7BuDA,GK6BvD,CAAA,GL7B6C,IK6B7C,CAAoB,MAApB,EAA4B;AFxB5B,APP+B,AIEiCD,AFMhE,AOuB8B,EL7BkCA,AK6BlC,EAAE,EAAE;AFvBlC,APAA,AIN6C,AFO7C,ACVO,AEMK,AI0BgB,CL7BrB,AK6BP,EL7BuE,MDHvDX,GEMEiC,IFNX,CAAiBhC,QAAjB,EAA2B,AEMD,GAAG,CAACnD,IAAD,EAAOoF,KAAP,KAAiB;AEIrD,APAA,AINI,AFOJ,ACVI,AGOG,ADDS,AI2BhB,IAAM,KL9BK,ADHApG,AGOKsH,GDDI,CAACpB,EDHJ,ADHA,AMiCA,CNjCC9B,AGOX,CAAiB7D,CDDR,AI2BI,CL9BC4E,CCGO,CCCrB,CHPI,CAAc,AGOKhB,AG0BV,CAAA,CNjCO,CCGV,CAAae,CDHAf,GGOvB,EAAiC,CFJX,GK8BT,CL9BsB,AK8BR,KAAd,EAAqB,IAArB,CAA0B,cAA1B,CAApB;AFvBA,APAA,AINQ,AFOR,ACXyB,AGQrB,ADDgB+B,AI4BpB,GNnCW,CAAP,EGQI,CAAC5G,AG2BF,CAAC,EJ5BY4G,CI4BpB,CAAY,GJ5Ba,GAAGnC,EAAE,CAAC/C,EI4B/B,EJ5B8B,EAAOoF,KAAP,CAAV,CCCE7F,CFHV,GEGH,CAAL,EAAyB;ACG7B,APAA,AILgB4C,AFMRH,ACXP,AGQO,ADDS,AI6BjB,IPzBQA,AOyBF,EL/BUG,IEGF,EFHQ,EAAEA,AEGN/B,MFHY,AFMN,AOyBF,CL/BSqB,CFML,CAACQ,AOyBF,GLhCb,EKgCa,CAAA,CPzBC,EAAUT,GIHtB,CAAgBnB,IJGJ,GOyBD,CAAe,CPzBS,IOyBT,CAAA,KH5BDC,MAAT,CAAgBf,CG4BN,CAAc,EH5BxB,CAAhB,CAAN,CG4BgC,CAAf,EAAqC,CAC1D;AF1BJ,APAA,AILgBG,AFMJ,ACVZ,AGOK,ADDQ,AI6BP,EAAA,IL/BUA,AK+BN,CJjCE,CIiCA,EL/BQ,AFMJ,EENMyC,KFMCX,CENK,CAAC9B,GK+BzB,CLjCQ,EFQI,KAAoB,UAAxB,EAAoC;AFAhD,AILgBuD,AFMA,ACVhB,AEOY,AI2BgB,EAAA,IL9BZA,GK8BmB,EAAE,EL9Bd,CFMD,CENGa,GFMC1D,IETd,iBFSU,CAAgBC,mBAASI,UAAzB,CAAN;AELAgB,AFMH,ACVb,AGOI,ADAJ,AI0BuC,IAAA,EL7BvBA,AEGR,IG0BqC,CL7BxB,CK6B0B,CL7BxBoC,GK6Bc,OH1BxBV,QAAL,MAAmB,QAAvB,EAAiC;ACC9B,AHRK,ADCZ,AGOQ,ADAR,AIyBqD,IAAA,CLlC7C,EAOKmB,EGEG2D,CDAF,CGyB8C,EAAE,CHzB5C7H,GFFN,IAAgB,CGErB,CAAuByB,MAAvB,EAA+B,IDAxB,CAAgBxB,mBAASG,WAAzB,CAAN;ACCJ,AHFY0D,AFKJ,ACVZ,AGOK,ADAL,AIwBgE,MFxBxD,AHFQA,AK0BgD,CFxBvD5F,GEwB2D,EPrBlD4D,AOqBoD,CL1B/C,CAACoC,GFKD,GAAG,EAAd,EELW,CAAP,SGEMzC,MAAM,CAACnC,IAApB,CAAL,EAAgC;AAC5B,AHFK,ADLb,AM8B8D,KLlCtD,KGWM,IAAIU,qBAAJ,CAAgBC,mBAASa,WAAzB,CAAN;AACH,APFE,AICF,AFGO,ACTZ,AGOI5C,AGsBiC,GLnCpB,CAAb,EJWS2B,KEII,EFJV,IEIgBkC,KFJMrC,CEIjB,IFJL,AEI0BmC,CFJE,CMElB1C,IAAb,CJEQ,CIFWoD,CJEmB,MIFtC,GAA6B,EACzB,GAAG,2BAAcpD,IAAd,CADsB;AND7BQ,AICH,AFGe,ACThB,AGQQ,ADHI,AIuBR,CAD0D,CTtB1DA,CSwBA,IHrBOoD,KJCStD,AGJFwF,CLAH,CAACvG,CSsB8C,EAG1D,ITzBW,EAAUC,EEIT,CACK,AGLW,GAAG,CAAC,AIsB0B,CTtB/C,ASsBU,CAAzB,CTtBmC,AKAIuG,IAAJ,KAAa,OHKLnD,MAAM,CAACzC,IAAK,YAAWyC,MAAM,CAACV,KAAM,EAD/D,EAEIU,MAAM,CAACzC,IAFX;AKDZ,APFI,AMAyB,ADAjB,AI2BhB,GH3BI,IG2BG,CFzBGwI,AEyBF,ET3BMpJ,CS2Bd,CAAY,GJ3BWoG,ELAf,GKAoB,CAAC,CEEL,EFFQI,CEEJ6C,GFFA,AI2B5B,CFzB2B,AFFX,IEEqB;AAC7B,ALKQ,AIJf,ADHY,AI4Bb,IAAM,GJ9BM,CEIA,CAACA,GLKO,CKLH,ALKIhG,CKLHiG,AE0BF,GAAG,EPrBQ,CKLnB,ALKoB1I,EKLF,AE0BP,CAAA,CPrBH,EAAkB,YOqBf,EAAnB;AFzBY,APFJ,AEOY,ACdb,AGWP,ADHY,AI2BZ,QT5BYjB,CGPI4E,CMmCN,CAAC,EF1BQ/E,GLKO,EOqB1B,CAAmB,CPrBW8B,ECdvB,CAAuBkD,GMmCJ,CAAC,IT5BN5E,EGPd,CMmCP,CNnC0C6E,CMmCN,IF1BJ1B,CPFpB,AEOc,CFPM9C,AEOUsB,COqBC,CNnCpC,AMmCqC,EF1BN,AJTe,CISdX,GPF3B,COEO,APFX,COEI,CPF+B,CS4B3C,OPrBmDgB,aAAzB,CAAN;AKJX,APFG,AEOK,ACdb,AGWJ,ADHA,AI4BA,MNpCQ8C,CMoCD,CAAC,GAAR,CAAY,KNpCO,GAAG,CAAlB,CMoCkB,CAAC,GAAX,EAAZ;AT5BYtD,AGPR,AGWJ,ADHA,AI4BA,MT7BYA,AGPJuD,CMoCD,CAAC,GAAR,CAAY,CT7BO,CAACtD,EGPF,EHON,CAAarB,AGPJ,CAAjB,EMoCkB,CAAC,GT7BX,KS6BA,CAAoB,MAApB,CAAZ;AF1BQ,APFC,AEOO,ACdZ,AGWJ,ADHA,AI4BA,MNpCQ4E,CMoCD,CAAC,ENpCJ,CISW,AE2Bf,CPtBoB,AOsBR,CPtBSrC,SOsBC,CPtBS,AOsBR,CPtBSc,MAAM,CAACzC,EOsB3B,CAAsB,CPtBH,CAAf,EAA8B,MOsBlC,CAAZ;AF1BYiD,ALKQtB,AIHpB,ADHA,AI6BA,IAAM,EF5BMsB,ILKQtB,GKLD,EAAE,AE4BJ,EF3BD,CE2BI,EF3BD/C,ALIW,CAAC6D,EOuBX,CAAA,GPvBiB,CAACzC,IAAR,CAAV,GAA0B,EAA1B,COuBA,EAApB,MF3BgCmC,MAAM,CAACnC,IAApB,EAA0BiD,OADxB;AAEL,APHR,AEOS,ACdb,AGWJ,AG0BA,MNrCQW,GHOK/D,EOGM4I,AE2BR,CAAC,CT9BJ,EOGe,CAACN,APHJ,AGPF,GMqClB,CAAoB,CNrCGtE,MMqCI,CAAC,ET9BpB,AGPJ,EAA8B,IMqClC;AF7BqB,APAb3E,AEOQ,ACdR,AGWR,AG2BA,IT/BQA,AS+BF,ONtCS,CHOC,CAACoB,EGPT,EHOA,CAAc,GS+BC,CT/Bf,EAAoB,AS+BF,KAAA,CAAA,GT/BlB,EAA+BlB,OAA/B,EAAwCC,QAAxC,CS+BkB,CAAwB,UAAxB,EAAoC,WAApC,CAA1B;AFhCe,APEV,AGPA,AGWL,ADLY,AIgCZ,KFjCQ,EEiCD,CAAC,GAAR,CAAY,CJhCO,CAACiB,GIgCpB,CJhCmB,CIgCA,CJhCOoF,KAAP,KAAiB,MIgCA,CAAC,GAAlB,EAAnB;AF3BK,ADCL,ADLgBD,AIkChB,GFzCI,EEyCJ,CAAA,EJlCgBA,KIkChB,CAAQ,OAAO,CAAC,CJlCe,CAACnF,IAAD,EAAOoF,AIkCtC,EAA0B,GJlCK,CAAf,CIkChB;AT7CmC,AEkBnB,ACZZ,AEMY,AIkChB,MNvCQ9B,CMuCD,CAAC,GAAR,CACI,EP7BkB5B,CGNC2D,CFLL,EDWQ,GAAG,ACXN,IAAf,IACN,AEIc,CIkChB,EAEI,INxCK/B,CMwCL,CAAA,OAAA,CNxCF,AMwCU,KNxCY,EMwCL,CAAC,KNzCZ,GMyCJ,CNvCFC,CMwCO,QNxCE,KAAK,IAFR,IAGN,EMsCE,CAC6B,INvCxBA,SAAP,KAAqB,QAJnB,EAKE;AIMF,APHJ,AEKoB9B,ACPZ,AECK,AIoCsB,EAAA,KJvCvB,AIuC4B,EFhC7B,AEgC+B,CP9BtBA,AO8Ba,CNrClB,IDOU,CCPjB,CDOmBU,MAAM,CAACV,KADL;AKArB,APHR,AEKoBlC,ACPf,AGIE,ADHE,AImCoC,EAAA,EAAE,CJjElC,CIiEoC,CAAhB,EHhCjB8G,CJGI9G,IAAI,EAAE4C,AIHnB,CAAiB5C,IAAjB,CJGyB,CAACG,AIHH,IJCD;AKC7B,APHA,AEKoBiC,AIHhB,ADnCO,AIkEyC,EAAA,CJlEhD,GCmCI,AG+BgD,CH/B/CrD,CG+BiD,EP5BtCqD,IAAI,EAAEH,QAHG,UIAPjC,IAAb,CAAL,EAAyB;AEpF7B,ADsFA,APHA,AEKoBqC,ACPhB,AGII,ADHP,AIiCgC,CJnE1B,AIkEH,CAFJ,KN/BS8B,GDOW9B,AIHN,CHJV,CDOkB,EAAEP,AIHNjB,CHJDkD,SDOiB,CAACnB,ACP/B,EAAyB,IDOY,CAACzC,GIH5B,CJGoB,AIHJW,CJGN,CAAwBnB,iBIHToB,MAAT,CAAgBf,IAAhB,CAAhB,CAAN;ACER,APHA,AEA6B,ACFrBiE,AGIH,ADFL,AIkCA,INpCQA,GMoCD,CAAC,CPlCQ,EOkChB,CAAY,GNpCO,IAAI,CAAf,CMoCR,EAAuB,KAAA,CAAA,OAAA,CAAQ,MAAR,CAAvB;AD3GA,AD6EA,APHA,AEKgB,ACPX,AEEL,AImCA,KAAA,CAAA,OAAA,CAAQ,MAAR,EAAgB;AF/BhB,ADDI,ADFJ,AIkCkB,EAAA,MAAM,CHhCb,CGgCe,oBHhCP,EAAE,GAAG,2BAAcjE,IAAd;ACEhB8I,ALCQhH,ACNZ,AGGe,ADDnB,AIiCgB,CAAhB,EHhCW,CCEHgH,ADFJ,GHHK3E,CIKG,ALCIrC,EKDF,CAACc,AJLX,IAAaoB,EIKH,CLCY,CKDH+E,ALCI5G,IAAI,CAACnC,ACN5B,EIK0B,AJLF,EDMF,CKDO,ALCjB,CAAsBmC,IAAI,CAACE,EAA3B,IAAiCF,IAAjC;AKDmB0G,ALEnB,ACNR3E,AGGP,ADDD,AIiCA,INnCQA,EII2B2E,CE+B5B,CAAC,GAAR,CF/ByC,AE+B7B,EF/B+B,AJJzB,IAAI,CIIW,AJJzB,GMmCR,EAAwB,KAAA,CAAA,QAAA,CAAS,OAAO,CAAC,QAAjB,CAAxB;AF/BkDP,ALGlD,AIFA,AG+BA,KAAA,CFhCkDA,AEgClD,OFhCyD,AEgCzD,CAAQ,CFhCmD,MEgC5C,CAAC,QAAhB,EAA0B,IAA1B;AFhCiC,APJ1B,AGEC,AGIR,AG+BA,KFjCc,CPJDzH,CSqCN,CNlCK,AMkCJ,EFjC4D,AJDtDsD,CMkCd,CAAY,ENlCM,GHHX,CGGeJ,AMkCtB,EAAoB,KAAA,CTrCaxD,ASqCb,ENlCR,GHHL,CAAgC,CGIpC,CAACuD,AMiCgB,CAAS,OAAO,CAAC,INjCpB,CAACC,GMiCE,CAApB,GAEA,GNnC4B,CAACI,IAAD,CAAX,EAAmBH,SAAS,CAACG,IAAD,CAA5B,CAFT,EAGE;AIAE,APJR3D,AEOYmC,ACFJ,AGCZ,ENNInC,MEOYmC,EKHA,GPJD,AEOM,ACFF,CHLHpD,AEOMsD,GKHCD,CLGP,ACFJ,CDEeT,EFPZ,EOIC,APJS3C,AEOT,KKHkB,GPJnB,EAAoB,GOIvB,EAAgC;AAC5B,APJR,AEOK,ACFJ,AGCT,AGiCA,KAAA,CAAA,ITvCcD,GSuCd,CFnCsB,AEmCd,GTvCA,COIkBsB,GEmCX,CAAC,QAAhB,EAA0B,KAA1B,CAAgC,CFnCV,CAAgBC,SEmCtC,UFnC+CY,YAAzB,EAAuCY,MAAM,CAACnC,IAA9C,CAAN;AACH,APJL,AGKH,AGCL,ADNO,AIwCP,MJxCa6F,CIwCN,CAAC,CTxCKhG,ESwCb,CAAY,CTxCJ,AKAY,GLAA,AKAIwD,EAAD,IAAQ,CIwC/B,EAAyB,KAAA,CTxCjB,ASwCiB,OAAA,CAAQ,WAAR,CAAzB;ATvCQnE,AEOI,AIDZ,ADNI,ILAIA,IKAE4G,ILAM,CAACxF,AEOE,AGPJ,GAAG,CLAV,CAAc,AKAlB,ILAI,EAAoB,OAApB,EAA6BlB,OAA7B,EAAsCC,QAAtC;AOKI,APJP,AEOW,ACFZ,AGCJ,ADNI,SFKOyE,AELA,CAAC,EEIM+E,CFJHjD,IAAJ,GFKW,CIDK,CFJH,EEIO,CJCJ7B,GIDOtB,MAAO,CJCrC,EIDQ;AAEA5D,ALEIsD,ACFf,AGCD,ADNQ,QHOQA,EGPF4D,CAAC,GHOO,AGPJH,EHOMpD,EGPF,CAAC,CAAD,CHKH,AGLX,MEKWqG,SAAP,IAAoB,EAChB,GAAGhK,qBAAOgK,SAAP,CADa;AAEhB,APbuB,AMavC,SCAiB1G,MAAM,CAACnC,IAAR,GAAewI,cAAc,CAACI,OAAD;AAFb,ALGhB,AGPR,OEII,CFJA7C,CAAC,IAAID,KAAT,EAAgB;AESZ,ALDZ,AGPY,YEQMgD,CFRChD,KAAK,CAACC,CAAD,CAAZ,GEQkB,GAAG;AACjB/F,ALDhB,AIFO,ADLE,KAFD,GEUQA,CDHA0G,EDLD,CEQK,EAAEvE,GDHf,CAAkBM,ECGG,CAACzC,GDHtB,CCE0B,CDFA;ACIjB+B,ALDAK,AIFZ,ADLQ,QEQIL,ALDAK,IGPE4D,CEQG,CLDC,CKCCvD,CLDC,EGPA,GAAGY,CHOG,CGPD,CAAC0C,CAAD,CAAjB,CCKItD,MAAZ;ACC6B,ALEb,AIFhB,ADLQqD,MAAAA,CEKA,EDAD,EDLM,CAACC,CAAD,CAAL,CHOa,EGPFC,IHOQhE,EGPnB,EHOQ,IAAmBQ,CIFpB,EAAE,EJED,CIFI,CJEsB,yBIFTC,MAAb,EAAqBQ;ACKjC,ALFY,AIHL,ADJP,GCID,CAAP,SCKe,AFTA+C,EEUH,CLHY7F,EKGT2I,CFVP,UHOY,CKEL,ALDU,yBAAwB9G,IAAI,CAACnC,IAAK,YAAWmC,IAAI,CAACD,KAAM,EAD7D,EAEIC,IAAI,CAACnC,IAFT;AAIA8B,AINvB,ADJQ,YHUeA,UAAU,CAACK,IAAI,CAACnC,IAAN,CAAV,CAAsBwC,MAAtB,CAA6BL,IAAI,CAACE,EAAlC,EAAsC,CAAtC;AKAR,ALCK,AILrB,ADLK,GATD;AEmBJ,ALCiB,AILjB,ADLC,CAZM;AEsBP,ALdmB,AIUnB,ADJA,OHNY;AKeZ,ALCS,AILT,ADJA,KH7FW;AKsGX,ADJA,ADJA;AESgB2E,ALCR,AILR,ADJA,QEQgBA,QAAQ,EAAE,CAACtD,OAAO,GAAG,EAAX,KAAkB,qBAASuF,YAAT,EAAuBvF,OAAvB,CAPzB;ALSnB,AILA;ACIgB,ALEhB,AILA;ACIA,ALEA,AILA;ACIA,ALEA,AILA;ACIA,ALEA,AILA,ADRO,SAASpE,IAAT,CAAc8G,KAAd,EAAqB;AEY5B,ALEA,AILA,ADRI,QAAMC,KAAK,GAAG,oBAAd;AEYYkC,ALERzF,AILR,ADRI,IHaIA,IKFQyF,AFXNjC,OAAO,EEWQ,CLEH,AGbF7G,CEWQ+D,CLEHZ,CKFE,GFXD,CEWS,AFXR2D,CHaH,IAAY,IGbhB,CAAiBC,QAAjB,CAA0B/F,IAA1B,CAA+B2F,KEWC6C,AFXhC,EAAsCxC,KAAtC,CAA4CJ,IEW7B,CFXf,CEW8C7C,EAA/B,CAbhB,CFEuD,EAAtE;AHcQ,AILZ,ADRI,SAAO,CHaKlD,AGbJgG,OAAO,CAAC,CAAD,CAAP,GHaA,CACK,AGdS,WAAf,EAA4BI,SHcD9D,EGd3B,EAAP,EHcwC,CAACzC,IAAK,YAAWyC,MAAM,CAACV,KAAM,EAD9D,EAEIU,MAAM,CAACzC,IAFX;AKDI,ADHhB,ADRC;AEYD,ALKY,AIRZ,UJQgB2B,UAAU,CAACc,MAAM,CAACzC,IAAR,CAAd,EAA6B;AKJzC,ALKgB2B,AIRhB,QJQgBA,UAAU,CAACc,MAAM,CAACzC,IAAR,CAAV,CAAwB4C,OAAxB,CAAiCZ,IAAD,IAAU;AKJ1D,ALKoB,AIRpB;ACIgB0E,ALKhB,QKLgBA,QAAQ,EAAE,MAAM,qBAASoC,YAAT;AAnBb,ALyBnB,OKzBY;AAqBH,ALKT,AIVO,KCxCI,IDwCKjC,QAAT,CAAkBpE,MAAlB,EAA0Bc,OAAO,GAAG,EAApC,EAAwC;AJW/C,AIVI,QAAMuD,KAAK,GAAG,EAAd;ACKI,ALMY,AIThB,cJSoB9E,IAAI,CAACD,KAAL,GITRU,EJSuBA,IITnC,EJSyC,CAACV,KAA1B,EAAiC;AKL7C/B,ALMgBgC,IKNhBhC,IAAI,EAAEmC,ELMUH,IKNJ,A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","file":"script.221c08a2.js","sourceRoot":"../exemples","sourcesContent":["/** storage instance */\nexport const repositories = {};\n/** states instance */\nexport const states = {};\n/** middlewares list */\nexport const middlewares = {};\n/** store settings */\nexport const settings = {\n    strictMode: {},\n};","\nimport { settings } from './repositories';\n\n/** debuger list */\nexport const debugCollection = {};\n\n/**\n * Write log object\n * @param {string} message message\n * @param {string} repoName repository name\n */\nconst writeLog = function (type, message, repoName) {\n    if (Object.keys(debugCollection).length > 0) {\n        const line = this.stack.split('\\n')[1].split(':')[2];\n        createLog(\n            {\n                message: this.name + ': ' + message,\n                file: line,\n                level: repoName ? 'local' : 'global',\n                repo: repoName,\n                type,\n            },\n            repoName\n        );\n    }\n};\n\n/**\n * This method processes the storage logs\n * and outputs them to the debugger if necessary.\n * @param {any} data is error -> new Error, is warn -> string\n * @param {string} repoName repository name\n * @public\n */\nexport const createLog = function (data, repoName) {\n    for (const key in debugCollection) {\n        if (key === repoName) {\n            debugCollection[key](data);\n        }\n\n        if (!repoName) {\n            debugCollection[key](data);\n        }\n    }\n};\n\n/**\n * Create  log\n * @param {string} message message\n * @param {string} repoName repository name\n * @public\n */\nexport class Log extends Error {\n    constructor(message, repoName) {\n        super(message);\n        this.name = 'Biscuit log';\n        writeLog.call(this, 'log', message, repoName);\n    }\n}\n\n/**\n * Create warning log\n * @param {string} message message\n * @param {string} repoName repository name\n * @public\n */\nexport class Warning extends Error {\n    constructor(message, repoName) {\n        super(message);\n\n        if (settings.strictMode[repoName]) {\n            // eslint-disable-next-line no-console\n            console.warn(message);\n        }\n\n        this.name = 'Biscuit warn';\n        writeLog.call(this, 'warning', message, repoName);\n    }\n}\n\n/**\n * Create error log\n * @param {string} message message\n * @param {string} repoName repository name\n * @public\n */\nexport class CreateError extends Error {\n    constructor(message, repoName) {\n        super(message);\n        this.name = 'Biscuit error';\n        writeLog.call(this, 'error', message, repoName);\n    }\n}","\n/** debug messages */\nexport const messages = {\n    noRepo: (name) => `repository <${name}> not found.`,\n    noState: (name) => `state <${name}> not found.`,\n    initialType: 'The initial must be an object.',\n    noListener: 'The subscriber\\'s listener must be a function.',\n    noValidAction: 'An invalid dependencies was processed.',\n    storageNameError: (fnName) =>\n        `biscuit ${fnName} error: storage name is not a string.`,\n    noStoreParams:\n\t\t'The createStore method must contain the storage parameters.',\n    noRepoName: 'The repository name is a required field.',\n    middleNoFunc: 'Middleware should be provided as a feature.',\n    debuggerNoFunc: 'Debugger should be provided as a feature.',\n    actionString: 'The state name must be a string.',\n    repoNotFind: 'Repository not found.',\n    repoExists: 'A repository with this name already exists.',\n};","import { Warning, CreateError, Log } from './debugger';\nimport { messages } from './messages';\n/**\n * Module of the library responsible for creating tasks and subscribing to them.\n * @param  {string} action action name\n * @return {object} methods\n * @public\n */\nfunction createEmmitor() {\n    const taskBuffer = {};\n\n    return {\n        /**\n\t\t * This method allows you to subscribe to an action.\n\t\t * Creates a task that puts its own callback function,\n\t\t * which should then be started by the dispatcher\n\t\t * @param {string} stateName name of the state to subscribe to\n\t\t * @param {function} listener callback function\n\t\t * @param {string} state store state\n\t\t * @return {object{params: object, remove: function}} returned task id\n\t\t * @public\n\t\t */\n        subscribeAction: (taskName, listener, state) => {\n            if (typeof listener !== 'function') {\n                throw new CreateError(messages.noListener, taskName);\n            }\n\n            if (!taskBuffer[taskName]) {\n                taskBuffer[taskName] = [];\n            }\n            /** create task */\n            const task = {\n                state,\n                name: taskName,\n                todo: listener,\n                id: taskBuffer[taskName].length,\n            };\n            /** write task to buffer */\n            taskBuffer[task.name][task.id] = task;\n\n            new Log(`subscribe -> store: ${taskName}, state: ${state}`, taskName);\n            return {\n                /** task params */\n                params: task,\n                /**\n\t\t\t\t * Remove listner\n\t\t\t\t */\n                remove: () => {\n                    new Log(\n                        `unsubscribe -> store: ${task.name}, state: ${task.state}`,\n                        task.name\n                    );\n                    taskBuffer[task.name].splice(task.id, 1);\n                },\n            };\n        },\n\n        /**\n\t\t * This method allows you to subscribe to multiple actions.\n\t\t * Creates multiple tasks that run a single callback function.\n\t\t * @param {actions[object{repo: string, store: string}]} actions array actions\n\t\t * @param {function} listener callback\n\t\t * @return {}\n\t\t */\n        subscribeActions: (actions, listener) => {\n            if (typeof listener !== 'function') {\n                throw new CreateError(messages.noListener);\n            }\n\n            const tasks = [];\n            for (const action of actions) {\n                new Log(\n                    `subscribe -> store: ${action.repo}, state: ${action.state}`,\n                    action.repo\n                );\n\n                if (!action.repo) {\n                    throw new CreateError(messages.noValidAction);\n                }\n\n                if (!taskBuffer[action.repo]) {\n                    taskBuffer[action.repo] = [];\n                }\n                /** create task */\n                const task = {\n                    state: action.state,\n                    name: action.repo,\n                    todo: listener,\n                    id: taskBuffer[action.repo].length,\n                };\n                /** write task to buffer */\n                taskBuffer[task.name][task.id] = task;\n                /** write tasks to an array, for subsequent\n\t\t\t\t *  deletion via the remove method */\n                tasks.push(task);\n            }\n\n            return {\n                /** tasks array */\n                params: tasks,\n                /**\n\t\t\t\t * Remove listners\n\t\t\t\t */\n                remove: () => {\n                    for (const task of tasks) {\n                        new Log(\n                            `unsubscribe -> store: ${task.name}, state: ${task.state}`,\n                            task.name,\n                        );\n                        taskBuffer[task.name].splice(task.id, 1);\n                    }\n                },\n            };\n        },\n\n        /**\n\t\t * Starts all tasks that match the specified state name\n\t\t * and passes data to their callback functions.\n\t\t * @param {object{repo: string, state: string}} action action params\n\t\t * @async\n\t\t * @public\n\t\t */\n        dispatchAction: (action) => {\n            new Log(\n                `dispatch -> store: ${action.repo}, state: ${action.state}`,\n                action.repo\n            );\n\n            if (taskBuffer[action.repo]) {\n                taskBuffer[action.repo].forEach((task) => {\n                    /**\n\t\t\t\t\t * If the status field is not defined,\n\t\t\t\t\t * then run the task without additional checks, if the field is found,\n\t\t\t\t\t * then perform a state comparison\n\t\t\t\t\t */\n                    if (task.state === action.state) {\n                        task.todo(task);\n                    }\n\n                    if (task.state === undefined) {\n                        task.todo(task);\n                    }\n                });\n                return;\n            }\n\n            new Warning(\n                `store \"${action.repo}\" has no active subscriptions.`,\n                action.repo\n            );\n        },\n    };\n}\n\nexport const emitter = createEmmitor();","import { middlewares, states, repositories } from './repositories';\nimport { CreateError } from './debugger';\nimport { messages } from './messages';\n\nexport function getStateRepo(action) {\n    return states[`\"${action.state}\"`][action.repo];\n}\n\nexport function getRepository(name) {\n    return repositories[name].content;\n}\n\nexport const actionError = (action) => {\n    if (!action || !action.repo || !action.state) {\n        throw new CreateError('Invalid action parameters.');\n    }\n\n    if (!repositories[action.repo]) {\n        throw new CreateError(messages.noRepo(action.repo));\n    }\n\n    if (!states[`\"${action.state}\"`]) {\n        throw new CreateError(messages.noState(action.state), action.repo);\n    }\n};\n\n/**\n * Helper method for running middleware\n * @param {object} context handler context\n * @param {function} fn callback\n * @async\n * @private\n */\nexport async function activeMiddlewares(context, fn = () => null) {\n    if (middlewares[context.repo]) {\n        await middlewares[context.repo].forEach((middle) => {\n            middle(context, fn);\n        });\n    } else {\n        fn(context.payload);\n    }\n}\n\n/**\n * This method is used to get the values of the object without\n * the possibility of overwriting.\n * by attempting to write generates an error.\n * @param {object} instance object to extract\n * @return {object} returns a modified copy of the object\n * @private\n */\nexport function gettter(instance) {\n    return Object.freeze({ ...instance });\n}\n\n/**\n * Helper method for comparing two objects\n * Warning: can't compare methods\n * @param {object} firstState first object\n * @param {object} lastState last object\n * @return {bool}\n * @private\n */\nexport function compareObject(firstState, lastState) {\n    let propInFirst = 0;\n    let propInLast = 0;\n    let prop;\n\n    if (firstState === lastState) {\n        return true;\n    }\n\n    if (\n        firstState === null ||\n\t\ttypeof firstState !== 'object' ||\n\t\tlastState === null ||\n\t\ttypeof lastState !== 'object'\n    ) {\n        return false;\n    }\n\n    for (prop in firstState) {\n        propInFirst += 1;\n    }\n\n    for (prop in lastState) {\n        propInLast += 1;\n\n        if (\n            !(prop in firstState) ||\n\t\t\t!compareObject(firstState[prop], lastState[prop])\n        ) {\n            return false;\n        }\n    }\n\n    return propInFirst === propInLast;\n}","import { repositories } from './repositories';\nimport { activeMiddlewares, getStateRepo } from './helper';\nimport { emitter } from './emitter';\n\nexport function dispatchProto({ action, prev, act, payData }) {\n    /**\n\t * Call before state change\n\t * @param {function} fn callback\n\t * @public\n\t */\n    this.before = (fn) => {\n        fn(prev);\n        return this;\n    };\n\n    /**\n\t * Merge state into repository\n\t * @public\n\t */\n    this.merge = () => {\n        repositories[action.repo].content = {\n            ...act,\n            ...payData,\n        };\n\n        return this;\n    };\n\n    /**\n\t * Call after state change\n\t * @param {function} fn callback\n\t * @async\n\t * @public\n\t */\n    this.after = async (fn) => {\n        let task;\n        const call = function (resolve) {\n            resolve({\n                ...getStateRepo(action).content,\n            });\n            task.remove();\n        };\n\n        await new Promise((resolve) => {\n            task = emitter.subscribeAction(\n                action.repo,\n                () => call(resolve),\n                action.state\n            );\n        }).then(fn);\n        return this;\n    };\n}\n\nexport async function dispatchInitMiddleware({ action, payData, act }) {\n    return await new Promise((resolve) => {\n        activeMiddlewares(\n            {\n                action: action.state,\n                repo: action.repo,\n                payload: payData,\n                state: act,\n            },\n            (newPayload) => {\n                resolve(newPayload);\n            }\n        );\n    });\n}","/**\n * Creates a throttled function that only invokes func\n * at most once per every wait milliseconds.\n * @param {function} callback target function\n * @param {number} limit counter\n * @return {function}\n */\nexport function throttle(callback, limit) {\n    let waiting = false;\n    return function () {\n        if (!waiting) {\n            callback.apply(this, arguments);\n            waiting = true;\n            setTimeout(() => {\n                waiting = false;\n            }, limit);\n        }\n    };\n}\n\n/**\n * Creates a debounced function that delays invoking func\n * until after wait milliseconds have elapsed since\n * the last time the debounced function was invoked.\n * @param {function} callback target function\n * @param {number} limit counter\n * @return {function}\n */\nexport function debounce(callback, limit) {\n    let isCooldown = false;\n\n    return function () {\n        if (isCooldown) {\n            return;\n        }\n        callback.apply(this, arguments);\n        isCooldown = true;\n        setTimeout(() => isCooldown = false, limit);\n    };\n}\n\n/**\n * This method set allows you to. save the state of functions\n * tied to the timer. Required for the case when the timer\n * function is initialized in a method with a frequent call,\n * for example, in the react function component.\n * @param {function} fn target function\n*/\nexport const sandbox = (fn) => {\n    return {\n        run: (function () {\n            let throt = null;\n\n            /** initial run\n             * @param {function} call target function\n             * @param {number} timer timeout\n            */\n            const initialThrottle = (call, timer) => {\n                if (!throt) {\n                    throt = fn(call, timer);\n                }\n            };\n\n            /** initial run\n             * @param {args[any]} args arguments\n             * @return {function}\n             */\n            const throttleCaller = (...args) => {\n                return throt(...args);\n            };\n\n            /** initial\n            * @param {function} call target function\n            * @param {number} timer timeout\n            * @return {function} throttleCaller\n            */\n            return (call, timer) => {\n                initialThrottle(call, timer);\n                return throttleCaller;\n            };\n        })(),\n    };\n};\n\n/**\n * memoized function\n * @param {function} fn target function\n * @return {function}\n*/\nexport const memoize = (fn) => {\n    const cache = {};\n    return (...args) => {\n        const n = args[0];\n        if (n in cache) {\n            return cache[n];\n        } else {\n            const result = fn(n);\n            cache[n] = result;\n            return result;\n        }\n    };\n};\n\n/**\n * Strict type checking\n * @param {*} value any value\n */\nexport function type(value) {\n    const regex = /^\\[object (\\S+?)]$/;\n    const matches = Object.prototype.toString.call(value).match(regex) || [];\n    return (matches[1] || 'undefined').toLowerCase();\n}\n","/**\n * BISCUIT STORAGE\n * @autor: Zhulev Philipp\n * @version: 1.0.0\n * @license MIT\n */\nimport {\n    repositories,\n    states,\n} from './repositories';\nimport {\n    emitter,\n} from './emitter';\nimport {\n    gettter,\n    getStateRepo,\n    getRepository,\n    compareObject,\n    actionError,\n} from './helper';\nimport { dispatchProto, dispatchInitMiddleware } from './dispatch';\nimport { CreateError } from './debugger';\nimport { type } from './utils';\nimport { messages } from './messages';\n\n/**\n * Allows you to subscribe to the store. and tracks its change.\n * @param {string} repo repository name\n * @param {function} fn callback\n * @param {string} state state name\n * @return {Promise}\n * @async\n */\nconst subscriber = function (repo, fn, state) {\n    let task;\n    const promise = new Promise((resolve) => {\n        task = emitter.subscribeAction(repo, () => {\n            /** if there is a state then pick it up */\n            const data = state\n                ? getState({ repo, state })\n                : getRepo(repo);\n            fn(data, task);\n            resolve({ data });\n        }, state);\n    });\n\n    const resolve = this.resolve(promise);\n    resolve['unsubscribe'] = task.remove;\n\n    return resolve;\n};\n\n/**\n * This method allows you to add new values to the repository.\n * Accepts the storage name and object.\n * @param {string} name repository name\n * @param {object} instance object with added data\n * @public\n */\nexport function addRepo(name, instance) {\n    if (!repositories[name]) {\n        throw new CreateError(messages.noRepo(name));\n    }\n\n    if (type(instance) !== 'object') {\n        throw new CreateError(messages.initialType);\n    }\n\n    repositories[name].content = {\n        ...getRepository(name),\n        ...instance,\n    };\n}\n\n/**\n * This method is used to get data from the storage by its key.\n * Warning: Storage data cannot be changed directly.\n * You can replace the values either with the \"addRepo\"\n * method or with state injection via \"manager\".\n * @param {string} name storage name\n * @return {object} storage data\n * @public\n */\nexport function getRepo(name) {\n    if (!repositories[name]) {\n        throw new CreateError(messages.noRepo(name));\n    }\n\n    return gettter({ ...getRepository(name) });\n}\n\n/**\n * This method is needed to get the storage state\n * Warning: Storage data cannot be changed directly.\n * You can replace the values either with the \"dispatch (...)\"\n * method or with an implementation via \"manager\".\n * @param {import('../types/state').StateAction} action the parameters of the action\n * @return {object} state data\n * @public\n */\nexport function getState(action) {\n    actionError(action);\n    return gettter({ ...getStateRepo(action).content });\n}\n\n/**\n * This is one of the most important methods.\n * allows you to asynchronously update and change the state of the storage.\n *\n * The first argument accepts action parameters,\n * the second argument accepts an object with new data\n * or a callback function that returns the past state\n * as an argument and returns a new state.\n *\n * Dispatch also returns several methods for working with states.\n * @param {import('../types/state').StateAction} action the parameters of the action\n * @param {object | import('../types/state').DispatchPayload} payload\n * payload data or callback function\n * @return {import('../types/state').Dispatcher}\n * returns methods: before, after, merge\n * @async\n * @public\n */\nexport function dispatch(action, payload = {}) {\n    const voids = {};\n\n    actionError(action);\n\n    if (type(payload) !== 'function' && type(payload) !== 'object') {\n        throw new CreateError('The payload must be an object or function.', action.repo);\n    }\n\n    (async function () {\n        const act = getStateRepo(action).content;\n        const prev = { ...act };\n\n        /** if the function\n         * then pass the current state to the callback  */\n        let payData = typeof payload === 'function'\n            ? payload(prev)\n            : payload;\n\n        dispatchProto.call(voids, {\n            action,\n            prev,\n            act,\n            payData,\n        });\n\n        /** initial middlewares */\n        payData = await dispatchInitMiddleware({ action, payData, act });\n\n        /** update state data */\n        getStateRepo(action).content = {\n            ...act,\n            ...payData,\n        };\n\n        /** create dispatch action */\n        emitter.dispatchAction(action);\n    })();\n\n    return voids;\n}\n\n/**\n * This is one of the most important methods.\n * Allows you to subscribe to the state. and tracks its change.\n * The first argument takes the parameters of the action.\n * results can be obtained through the callback of the second\n * argument or through the return promise.\n * @param {import('../types/state').StateAction} action the parameters of the action\n * @param {import('../types/subscribe').SubscribeListner} fn callback\n * @return {Promise<any>}\n * @async\n * @public\n */\nexport function subscribeToState(action, fn = () => undefined) {\n    const that = Promise;\n    try {\n        actionError(action);\n        return subscriber.call(that, action.repo, fn, action.state);\n    } catch (e) {\n        return that.reject(e);\n    }\n}\n\n/**\n * This is one of the most important methods.\n * Allows you to subscribe to the store. and tracks its change.\n * The first argument takes the name store.\n * results can be obtained through the callback of the\n * second argument or through the return promise.\n * @param {string} repo repository name\n * @param {import('../types/state').SubscribeListner} fn callback\n * @callback\n * @async\n * @public\n */\nexport function subscribeToStore(repo, fn = () => undefined) {\n    const that = Promise;\n    try {\n        if (!repositories[repo]) {\n            throw new CreateError(messages.noRepo(repo));\n        }\n\n        return subscriber.call(that, repo, fn);\n    } catch (e) {\n        return that.reject(e);\n    }\n}\n\n/**\n * The State Manager allows you to manage the storage and its state.\n * Provides a set of methods for two-way merge, replace, copy,\n * and other actions between the selected storage and state.\n * @param {object{repo: string, state: string}} action the parameters of the action\n * @return {object} returns a set of methods\n * @public\n */\nexport function manager(action) {\n    actionError(action);\n    return {\n        /**\n         * This method will combine data from the state with data from the storage.\n         * @public\n         */\n        merge: () => {\n            repositories[action.repo].content = {\n                ...getRepository(action.repo),\n                ...getStateRepo(action).content,\n            };\n        },\n\n        /**\n         * This method will merge data from the storage with data from the state.\n         * @public\n         */\n        pull: () => {\n            getStateRepo(action).content = {\n                ...getStateRepo(action).content,\n                ...getRepository(action.repo),\n            };\n        },\n\n        /**\n         * This method will replace the data from the storage with state data.\n         * @public\n         */\n        replaceRepo: () => {\n            repositories[action.repo].content = {\n                ...getStateRepo(action).content,\n            };\n        },\n\n        /**\n         * This method will replace the data from the state with the storage data.\n         * @public\n         */\n        replaceState: () => {\n            getStateRepo(action).content = {\n                ...getRepository(action.repo),\n            };\n        },\n\n        /**\n         * This method will merge the data of the selected state\n         * with the data of the state specified in the arguments.\n         * @param {import('../types/state').StateAction} targetAction\n         * the action that you want to merge\n         * @public\n         */\n        mergeState: (targetAction) => {\n            actionError(targetAction);\n            getStateRepo(action).content = {\n                ...getStateRepo({\n                    state: targetAction.state,\n                    repo: action.repo,\n                }).content,\n                ...getStateRepo(action).content,\n            };\n        },\n\n        /**\n         * This method removes the storage and its copies from all states.\n         * WARNING: This method can be useful for optimization,\n         * but it can make the code non-obvious,\n         * which will lead to difficulties in support.\n         * @public\n         */\n        remove: () => {\n            delete repositories[action.repo];\n            Object.keys(states[`\"${action.state}\"`]).forEach((item) => {\n                if (item === action.repo) {\n                    delete states[`\"${action.state}\"`][action.repo];\n                }\n            });\n        },\n\n        /**\n         * This method compares two states for identity\n         * WARNING: states should not contain methods\n         * @param {import('../types/state').StateAction} targetAction\n         * the action that you want to compare\n         * @return {bool}\n         * @public\n         */\n        compareStates: (targetAction) => {\n            actionError(targetAction);\n            return compareObject(\n                getStateRepo(action).content,\n                ...getStateRepo({\n                    state: targetAction.state,\n                    repo: action.repo,\n                }).content,\n            );\n        },\n\n        /**\n         * Сompare state and repository\n         * WARNING: states should not contain methods\n         * @return {bool}\n         * @public\n         */\n        compareWithState: () => {\n            return compareObject(\n                getRepository(action.repo),\n                getStateRepo(action).content\n            );\n        },\n\n        /**\n         * compare state and instance object\n         * WARNING: states should not contain methods\n         * @param {object} instance object instance\n         * @return {bool}\n         * @public\n         */\n        compareStateWithInstance: (instance) => {\n            return compareObject(getStateRepo(action).content, instance);\n        },\n\n        /**\n         * compare repository and instance object\n         * WARNING: states should not contain methods\n         * @param {object} instance object instance\n         * @return {bool}\n         * @public\n         */\n        compareRepoWithInstance: (instance) => {\n            return compareObject(getRepository(action.repo), instance);\n        },\n\n        /**\n         * Clones the selected storage and its state.\n         * WARNING: It is best to avoid using this method,\n         * as the best practice would be to do initialization of repositories in one place.\n         * Copying the repository can lead to code support difficulties.\n         * @param {string} name name for the new storage\n         * @public\n         */\n        clone: (name) => {\n            repositories[name] = { content: { ...getRepository(action.repo) } };\n            states[`\"${action.state}\"`][name] = {\n                content: { ...getStateRepo(action).content },\n            };\n        },\n\n        /**\n         * Updates the status of the repository.\n         * This method is equivalent to dispatch(...)\n         * @public\n         */\n        update: () => {\n            dispatch(action, {});\n        },\n\n        /**\n         * Returns parameters of the selected action\n         * @public\n         */\n        props: action,\n    };\n}\n","import { debugCollection, CreateError } from './debugger';\nimport {\n    repositories,\n    states,\n    middlewares,\n    settings,\n} from './repositories';\n\nimport {\n    dispatch,\n    subscribeToState,\n    getState,\n    getRepo,\n    subscribeToStore,\n    addRepo,\n} from './store';\nimport { type } from './utils';\nimport { actionError } from './helper';\nimport { messages } from './messages';\n\n/**\n * This method is responsible for creating a new repository.\n * Takes as the first argument a string with the repository name.\n * and the initial state of the storage as the second argument\n * @param {string} name storage name\n * @param {import('../types/store').Store} initial initial object\n * @public\n */\nexport function newRepo(name, initial = {}) {\n    if (!name) {\n        throw new CreateError(messages.noRepoName);\n    }\n\n    if (repositories[name]) {\n        throw new CreateError(messages.repoExists);\n    }\n\n    if (typeof name !== 'string') {\n        throw new CreateError(messages.storageNameError('newRepo'));\n    }\n\n    if (type(initial) !== 'object') {\n        throw new CreateError(messages.initialType, name);\n    }\n\n    repositories[name] = { content: initial };\n\n    return {\n        repo: name,\n        /** Subscribe by change @param {function} fn */\n        subscribe: (fn) => subscribeToStore(name, fn),\n        /** get reposiory */\n        get: () => getRepo(name),\n        /** add to reposiory @param {object} instance */\n        add: (instance) => addRepo(name, instance),\n    };\n}\n\n/**\n * This method binds states to the storage via the \"add\" method.\n * Gets the storage name string as an argument.\n * @param {import('../types/store').Store} params name of the linked storage\n * @return {import('../types/state').ActionCreator} returns the \"add\" method\n * @public\n */\nexport function createStateTo(params) {\n    if (!repositories[params.repo]) {\n        throw new CreateError(messages.repoNotFind);\n    }\n\n    const createNewState = (stns) => {\n        if (!stns.branch) {\n            return repositories[params.repo];\n        }\n\n        return {\n            content: {\n                ...repositories[params.repo].content,\n                ...stns.initial,\n            },\n        };\n    };\n\n    return {\n        /** This method binds the state to the selected storagee\n\t\t * @param {string} action state name\n         * @param {import('../types/state').StateOptions} options state options\n         * @return {import('../types/state').StateAction}\n\t\t * @public\n\t\t */\n        bind: (action, options = { branch: false, initial: {} }) => {\n            if (typeof action !== 'string') {\n                throw new CreateError(messages.actionString, params.repo);\n            }\n\n            const actionStr = `\"${action}\"`;\n\n            states[actionStr] = {\n                ...states[actionStr],\n                [params.repo]: createNewState(options),\n            };\n\n            const actionParams = {\n                repo: params.repo,\n                state: action,\n            };\n\n            return {\n                ...actionParams,\n                /**\n\t\t\t\t * Update state\n\t\t\t\t * @param {import('../types/state').DispatchPayload} payload\n\t\t\t\t * @public\n\t\t\t\t */\n                dispatch: (payload = {}) => dispatch(actionParams, payload),\n                /**\n\t\t\t\t * Subscribe to state\n\t\t\t\t * @param {import('../types/subscribe').SubscribeListner} fn callback\n\t\t\t\t * @public\n\t\t\t\t */\n                subscribe: (fn) => subscribeToState(actionParams, fn),\n\n                /**\n\t\t\t\t * Get state\n\t\t\t\t * @public\n\t\t\t\t */\n                getState: () => getState(actionParams),\n            };\n        },\n        /** repository key */\n        repo: params.repo,\n    };\n}\n\n/**\n * This helper method takes the first parameter \"createactionsTo\"\n * and adds actions to it from the string array of the second argument.\n * @param {import('../types/state').ActionCreator} createActions\n * createactionsto(storage name) method\n * @param {array[string]} actions actions string array\n * @return {{import('../types/state').StateAction}[]} actions\n * @public\n */\nexport function initialActions(createActions, actions) {\n    return actions.map((item) => {\n        const args = typeof item === 'string'\n            ? [item]\n            : [item.name, item.options];\n\n        return createActions.bind.apply(null, args);\n    });\n}\n\n/**\n * This helper method converts the actions received via the argument to an array\n * @return {import('../types/state').StateCollection} returns the \"compile\" method\n * @public\n */\nexport function stateCollection() {\n    const collection = {};\n    return {\n        /**\n\t\t * compile state collection\n\t\t * @return {import('../types/state').StateCollectionRepo} actions collection\n\t\t * @public\n\t\t */\n        compile: (...actions) => {\n            for (let action of actions) {\n                actionError(action);\n\n                if (!collection[action.repo]) {\n                    collection[action.repo] = [{ ...action }];\n                    continue;\n                }\n\n                collection[action.repo].push({ ...action });\n\n            }\n\n            return { ...collection };\n        },\n        /**\n         * Get the entire collection actions\n         * @return {import('../types/state').StateCollectionRepo} collections instance\n         * @public\n         */\n        all: () => ({ ...collection }),\n\n        /**\n         * Get a collection by matching the storage name\n         * @param {string} repo storage name\n         * @return {import('../types/state').StateAction[]} collections instance\n         * @public\n         */\n        fromRepo: (repo) => [ ...collection[repo] ],\n\n        /**\n         * Get the result filtered by state name\n         * @param {string} stateName state name\n         * @return {import('../types/state').StateAction[]} state list\n         * @public\n         */\n        outOfState: (stateName) => {\n            let out = null;\n            Object.keys(collection).forEach((key) => {\n                out = collection[key].filter(({ state }) => state === stateName);\n            });\n\n            return out;\n        },\n    };\n}\n\n/**\n * This helper method can combine multiple collections of actions.\n * Accepts \"stateCollection(...action)\"\n * @param {import('../types/state').StateCollection} collection array StateCollection\n * @public\n */\nexport function combineStateCollections(...collections) {\n    let allState = [];\n    for (let collection of collections) {\n        Object.keys(collection.all()).forEach((repoName) => {\n            allState = [ ...allState, ...collection.fromRepo(repoName) ];\n        });\n    }\n\n    const sc = stateCollection();\n    sc.compile.apply(null, allState);\n    return sc;\n}\n\n/**\n * This method allows you to add middleware for the state handler.\n * @param {import('../types/store').Store} store the store params\n * @return {import('../types/store').MiddlewareParams} returns a set of methods\n * @public\n */\nexport function middleware(store) {\n    if (!repositories[store.repo]) {\n        throw new CreateError(messages.noRepo(store.repo));\n    }\n\n    const s = store.repo;\n    return {\n        /**\n\t\t * Adds a handler to the middleware task list.\n\t\t * @param {function} fn middle function\n\t\t * @public\n\t\t */\n        add: (fn) => {\n            if (typeof fn !== 'function') {\n                throw new CreateError(messages.middleNoFunc, s);\n            }\n\n            if (middlewares[s]) {\n                middlewares[s].push(fn);\n            } else {\n                middlewares[s] = [fn];\n            }\n        },\n    };\n}\n\n/**\n * This method allows you to add your own debugger.\n * The debugger will accept and output logs instead of the standard debugger.\n * @param {import('../types/store').Store} store store object\n * @param {import('../types/store').DebuggerListener} fn debugger callback function\n * @public\n */\nexport function createDebuger(store, fn) {\n    if (!repositories[store.repo]) {\n        throw new CreateError(messages.noRepo(store.repo));\n    }\n\n    if (typeof fn !== 'function') {\n        throw new CreateError(messages.debuggerNoFunc);\n    }\n\n    debugCollection[store.repo] = fn;\n}\n\n/**\n * Monolithic method for creating a biscuit storage.\n * This is the preferred method for creating a repository.\n * @param {import('../types/store').StoreSettings} options\n * an object containing the store settings\n * @return {import('../types/store').StoreParams}\n * returns a set of actions\n * @public\n */\nexport function createStore(options) {\n    if (!options) {\n        throw new CreateError(messages.noStoreParams);\n    }\n\n    /** DefaultParams */\n    const params = { strictMode: true, ...options };\n\n    /** Create a new storage */\n    const repo = newRepo(params.repo.name, params.repo.initial);\n    const createAction = createStateTo(repo);\n\n    /** Set of storage parameters */\n    const output = {\n        store: { ...repo },\n        actions: {},\n    };\n\n    /** Adding States to the repository */\n    if (params.states) {\n        for (const key in params.states) {\n            const param = params.states[key];\n            const paramType = typeof param === 'string';\n            output.actions[key] = createAction.bind(\n                paramType ? param : param.name,\n                paramType\n                    ? {}\n                    : { initial: param.initial, branch: param.branch }\n            );\n        }\n    }\n\n    /** Adding middleware to the repository */\n    if (params.middleware && params.middleware.length > 0) {\n        const middle = middleware(repo);\n        for (const fn of params.middleware) {\n            middle.add(fn);\n        }\n    }\n\n    /** Adding debuger to the repository */\n    if (params.debugger) {\n        createDebuger(repo, params.debugger);\n    }\n\n    /** Strict mod */\n    settings.strictMode[params.repo.name] = params.strictMode;\n\n    return output;\n}","export {\n    createStore,\n    newRepo,\n    createStateTo,\n    initialActions,\n    stateCollection,\n    combineStateCollections,\n    middleware,\n    createDebuger,\n} from './internal/creator';\n\nexport {\n    manager,\n    dispatch,\n    getRepo,\n    getState,\n    addRepo,\n    subscribeToState,\n    subscribeToStore,\n} from './internal/store';\n","import {\n    createStore,\n    subscribeToState,\n    subscribeToStore,\n    dispatch,\n    getState,\n    getRepo,\n    addRepo,\n    createStateTo,\n    initialActions,\n    stateCollection,\n    combineStateCollections,\n    middleware,\n    createDebuger,\n    manager,\n} from '../packages/core/src';\n\ninterface Initial {\n    value: number;\n}\n\n\ninterface NewInitial {\n    id: number;\n}\n\nconst { store, actions } = createStore({\n    repo: {\n        name: 'user',\n        initial: { value: 0 },\n    },\n    states: {\n        testAdd: 'TEST/ADD',\n        testRemove: 'TEST/REMOVE',\n        testStep: {\n            name: 'TEST/STEP',\n            branch: true,\n            initial: { name: 'fill' },\n        },\n    },\n});\n\nmiddleware(store).add((context, next) => {\n    console.log('context', context);\n    next();\n});\n\ncreateDebuger(store, (e) => {\n    console.log(e);\n});\n\nstore.subscribe<Initial>((state: Initial) => {\n    console.log(state);\n});\n\nsubscribeToState<Initial>(actions.testAdd, (state: Initial) => {\n    console.log(state);\n});\n\nsubscribeToStore<Initial>('user', (state: Initial) => {\n    console.log(state);\n});\n\nactions.testAdd.subscribe<Initial>((state: Initial) => {\n    console.log(state);\n});\n\nactions.testAdd.dispatch({ value: 12 }).after<Initial>((state: Initial) => {\n    console.log(state);\n});\n\ndispatch(actions.testAdd, { value: 2 }).before<Initial>((state: Initial) => {\n    console.log(state);\n});\n\ndispatch(actions.testAdd, (prev: Initial) => ({ value: prev.value += 999 }));\n\nconsole.log(actions.testAdd.getState<Initial>().value);\n\nconsole.log(getState<Initial>(actions.testAdd).value);\n\nconsole.log(getRepo<Initial>('user').value);\n\naddRepo<NewInitial>('user', { id: 2 });\n\nconst superAction = createStateTo(store).bind('SUPER/ACTION');\n\nconsole.log(superAction);\n\nconst actionCollection = initialActions(createStateTo(store), [\n    { name: 'FIRST/ACTION', options: { branch: true, initial: { name: 'fil' } } },\n    'TWO/ACTION',\n    'LAST/ACTION',\n]);\n\nconsole.log(actionCollection);\n\nconst collection = stateCollection();\ncollection.compile(actions.testAdd, actions.testRemove);\n\nconsole.log(collection.all());\nconsole.log(collection.fromRepo('user'));\nconsole.log(collection.outOfState('TEST/ADD'));\n\nconst collection1 = stateCollection();\ncollection1.compile(actions.testStep);\n\nconst combineCollection = combineStateCollections(collection, collection1);\nconsole.log('sss', combineCollection.all());\n\n\nmanager(actions.testStep).merge();\nconsole.log(\n    'compare instance',\n    manager(actions.testStep)\n        .compareRepoWithInstance({ value: 0, id: 2, name: 'fill' })\n);\n\nconsole.log('1111111', getRepo('user'));\n\naddRepo('user', { result: 999 });\nconsole.log('not pull', getState(actions.testStep));\nmanager(actions.testStep).pull();\nconsole.log('pull', getState(actions.testStep));\n\n// manager(actions.testStep).remove();\n\nmanager(actions.testStep).clone('cloneuser');\n\nconsole.log('get clone', getRepo('cloneuser'));"]}